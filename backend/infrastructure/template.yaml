AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: NBA Live Scores application infrastructure

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
  VpcId:
    Type: AWS::EC2::VPC::Id
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
  NBABaseUrl:
    Type: String
    Default: "https://nba-prod-us-east-1-mediaops-stats.s3.amazonaws.com/NBA/liveData"
    Description: "Base URL for the NBA API"
  ArtifactsBucketName:
    Type: String
    Description: "Name of the S3 bucket for artifacts"
  VpcCidr:
    Type: String
    Description: "CIDR block for the VPC"
    Default: "172.31.0.0/16"

Resources:
  # DynamoDB Table
  GamesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub nba-games-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: gameId
          AttributeType: S
      KeySchema:
        - AttributeName: gameId
          KeyType: HASH
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: NBA-Live

  # MSK Security Group
  MSKSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for MSK cluster
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 9092
          ToPort: 9092
          CidrIp: !Ref VpcCidr
      Tags:
        - Key: Name
          Value: !Sub nba-live-msk-sg-${Environment}
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: NBA-Live

  # MSK Cluster
  MSKCluster:
    Type: AWS::MSK::Cluster
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      ClusterName: !Sub nba-live-kafka-${Environment}
      KafkaVersion: 3.4.0
      NumberOfBrokerNodes: 3
      BrokerNodeGroupInfo:
        InstanceType: kafka.t3.small
        ClientSubnets: !Ref SubnetIds
        SecurityGroups:
          - !Ref MSKSecurityGroup
        StorageInfo:
          EBSStorageInfo:
            VolumeSize: 100
      EncryptionInfo:
        EncryptionInTransit:
          ClientBroker: PLAINTEXT
          InCluster: true
      Tags:
        Environment: !Ref Environment
        Project: NBA-Live

  # Lambda Functions
  GameUpdateFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub nba-game-updates-${Environment}
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              body: JSON.stringify({ message: 'Game update function' })
            };
          };
      Handler: index.handler
      Runtime: nodejs18.x
      Timeout: 60
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref GamesTable
          NBA_API_URL: !Ref NBABaseUrl
          MSK_CLUSTER_ARN: !Ref MSKCluster

  GameUpdatePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GameUpdateFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt GameUpdateRule.Arn

  BoxScoreFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub nba-box-scores-${Environment}
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              body: JSON.stringify({ message: 'Box score function' })
            };
          };
      Handler: index.handler
      Runtime: nodejs18.x
      Timeout: 30
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref GamesTable
          NBA_API_URL: !Ref NBABaseUrl
          MSK_CLUSTER_ARN: !Ref MSKCluster

  BoxScorePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BoxScoreFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt BoxScoreRule.Arn

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub nba-live-api-${Environment}

  GamesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: games

  UpdateResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref GamesResource
      PathPart: update

  BoxScoreResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref GamesResource
      PathPart: "{gameId}"

  BoxScoreMethodResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref BoxScoreResource
      PathPart: boxscore

  # EventBridge Rules
  GameUpdateRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub nba-game-updates-${Environment}
      Description: "Trigger game updates every minute"
      ScheduleExpression: "rate(1 minute)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt GameUpdateFunction.Arn
          Id: "GameUpdateFunction"

  BoxScoreRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub nba-box-scores-${Environment}
      Description: "Process game updates for box scores"
      EventPattern:
        source: ["nba-live-updates"]
        detail-type: ["GAME_UPDATE"]
      State: ENABLED
      Targets:
        - Arn: !GetAtt BoxScoreFunction.Arn
          Id: "BoxScoreFunction"

  # API Gateway Methods
  UpdateMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref UpdateResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GameUpdateFunction.Arn}/invocations

  BoxScoreMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref BoxScoreMethodResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BoxScoreFunction.Arn}/invocations

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: [UpdateMethod, BoxScoreMethod]
    Properties:
      RestApiId: !Ref ApiGateway

  # API Gateway Stage
  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref ApiGateway
      DeploymentId: !Ref ApiDeployment
      StageName: !Ref Environment

  # IAM Roles and Policies
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub nba-lambda-role-${Environment}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: !Sub nba-lambda-policy-${Environment}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                Resource: !GetAtt GamesTable.Arn
              # Uncomment MSK permissions
              - Effect: Allow
                Action:
                  - kafka:DescribeCluster
                  - kafka:GetBootstrapBrokers
                Resource: !Ref MSKCluster

  # API Gateway Lambda Permissions
  GameUpdateApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GameUpdateFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*

  BoxScoreApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BoxScoreFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*

  # Add ElastiCache Redis Cluster
  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Redis cluster
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          CidrIp: !Ref VpcCidr

  RedisSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Subnet group for Redis cluster
      SubnetIds: !Ref SubnetIds

  RedisCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      CacheClusterId: !Sub nba-live-redis-${Environment}
      Engine: redis
      CacheNodeType: cache.t3.micro
      NumCacheNodes: 1
      VpcSecurityGroupIds: 
        - !Ref RedisSecurityGroup
      CacheSubnetGroupName: !Ref RedisSubnetGroup
      Port: 6379

  # Security Group for VPC Endpoints
  EndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for VPC endpoints
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref VpcCidr

  # VPC Endpoints for AWS services
  DynamoDBEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VpcId
      ServiceName: !Sub com.amazonaws.${AWS::Region}.dynamodb
      VpcEndpointType: Gateway

  CloudWatchLogsEndpoint:
    Type: AWS::EC2::VPCEndpoint
    DependsOn: VpcDnsAttributes
    Properties:
      VpcId: !Ref VpcId
      ServiceName: !Sub com.amazonaws.${AWS::Region}.logs
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup
      SubnetIds: !Ref SubnetIds

  # Enable DNS settings for VPC
  VpcDnsSettings:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId: !Ref VpcId
      DhcpOptionsId: !Ref DhcpOptions

  DhcpOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainNameServers: ['AmazonProvidedDNS']

  # Update VPC DNS attributes
  VpcDnsAttributes:
    Type: Custom::VpcDnsAttributes
    Properties:
      ServiceToken: !GetAtt VpcDnsAttributesFunction.Arn
      VpcId: !Ref VpcId

  # Lambda function to update VPC DNS attributes
  VpcDnsAttributesFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const ec2 = new AWS.EC2();
          
          exports.handler = async (event, context) => {
            try {
              const vpcId = event.ResourceProperties.VpcId;
              
              await ec2.modifyVpcAttribute({
                VpcId: vpcId,
                EnableDnsHostnames: { Value: true }
              }).promise();
              
              await ec2.modifyVpcAttribute({
                VpcId: vpcId,
                EnableDnsSupport: { Value: true }
              }).promise();
              
              return {
                Status: 'SUCCESS',
                PhysicalResourceId: vpcId
              };
            } catch (error) {
              console.error('Error:', error);
              throw error;
            }
          };
      Runtime: nodejs18.x
      Timeout: 30

  # Add permissions to modify VPC attributes
  VpcModifyPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-vpc-modify
      Roles: 
        - !Ref LambdaExecutionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ec2:ModifyVpcAttribute
            Resource: !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:vpc/${VpcId}

Outputs:
  DynamoDBTableName:
    Description: Name of the DynamoDB table
    Value: !Ref GamesTable
  MSKClusterArn:
    Description: ARN of the MSK cluster
    Value: !Ref MSKCluster
  GameUpdateFunctionArn:
    Description: ARN of the Game Update Lambda function
    Value: !GetAtt GameUpdateFunction.Arn
  BoxScoreFunctionArn:
    Description: ARN of the Box Score Lambda function
    Value: !GetAtt BoxScoreFunction.Arn
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
  RedisEndpoint:
    Description: Redis cluster endpoint
    Value: !GetAtt RedisCluster.RedisEndpoint.Address
  RedisPort:
    Description: Redis port
    Value: !GetAtt RedisCluster.RedisEndpoint.Port
  MSKBrokers:
    Description: MSK broker endpoints
    Value: !GetAtt MSKCluster.BootstrapBrokerString 