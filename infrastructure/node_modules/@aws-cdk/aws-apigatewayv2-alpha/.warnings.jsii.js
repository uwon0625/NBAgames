function _aws_cdk_aws_apigatewayv2_alpha_IApi(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_IIntegration(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_IRoute(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_IStage(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_DomainMappingOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("domainName" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.DomainMappingOptions#domainName", "");
        if (!visitedObjects.has(p.domainName))
            _aws_cdk_aws_apigatewayv2_alpha_IDomainName(p.domainName);
        if ("mappingKey" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.DomainMappingOptions#mappingKey", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_StageOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("autoDeploy" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.StageOptions#autoDeploy", "");
        if ("domainMapping" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.StageOptions#domainMapping", "");
        if (!visitedObjects.has(p.domainMapping))
            _aws_cdk_aws_apigatewayv2_alpha_DomainMappingOptions(p.domainMapping);
        if ("throttle" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.StageOptions#throttle", "");
        if (!visitedObjects.has(p.throttle))
            _aws_cdk_aws_apigatewayv2_alpha_ThrottleSettings(p.throttle);
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_StageAttributes(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("stageName" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.StageAttributes#stageName", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_ThrottleSettings(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("burstLimit" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.ThrottleSettings#burstLimit", "");
        if ("rateLimit" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.ThrottleSettings#rateLimit", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_SecurityPolicy(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        print("@aws-cdk/aws-apigatewayv2-alpha.SecurityPolicy", "");
        const ns = require("./lib/common/domain-name.js");
        if (Object.values(ns.SecurityPolicy).filter(x => x === p).length > 1)
            return;
        if (p === ns.SecurityPolicy.TLS_1_0)
            print("@aws-cdk/aws-apigatewayv2-alpha.SecurityPolicy#TLS_1_0", "");
        if (p === ns.SecurityPolicy.TLS_1_2)
            print("@aws-cdk/aws-apigatewayv2-alpha.SecurityPolicy#TLS_1_2", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_EndpointType(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        print("@aws-cdk/aws-apigatewayv2-alpha.EndpointType", "");
        const ns = require("./lib/common/domain-name.js");
        if (Object.values(ns.EndpointType).filter(x => x === p).length > 1)
            return;
        if (p === ns.EndpointType.EDGE)
            print("@aws-cdk/aws-apigatewayv2-alpha.EndpointType#EDGE", "");
        if (p === ns.EndpointType.REGIONAL)
            print("@aws-cdk/aws-apigatewayv2-alpha.EndpointType#REGIONAL", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_IDomainName(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_DomainNameAttributes(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("name" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.DomainNameAttributes#name", "");
        if ("regionalDomainName" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.DomainNameAttributes#regionalDomainName", "");
        if ("regionalHostedZoneId" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.DomainNameAttributes#regionalHostedZoneId", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_DomainNameProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("domainName" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.DomainNameProps#domainName", "");
        if ("mtls" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.DomainNameProps#mtls", "");
        if (!visitedObjects.has(p.mtls))
            _aws_cdk_aws_apigatewayv2_alpha_MTLSConfig(p.mtls);
        if ("certificate" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.EndpointOptions#certificate", "");
        if ("certificateName" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.EndpointOptions#certificateName", "");
        if ("endpointType" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.EndpointOptions#endpointType", "");
        if (!visitedObjects.has(p.endpointType))
            _aws_cdk_aws_apigatewayv2_alpha_EndpointType(p.endpointType);
        if ("ownershipCertificate" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.EndpointOptions#ownershipCertificate", "");
        if ("securityPolicy" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.EndpointOptions#securityPolicy", "");
        if (!visitedObjects.has(p.securityPolicy))
            _aws_cdk_aws_apigatewayv2_alpha_SecurityPolicy(p.securityPolicy);
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_EndpointOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("certificate" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.EndpointOptions#certificate", "");
        if ("certificateName" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.EndpointOptions#certificateName", "");
        if ("endpointType" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.EndpointOptions#endpointType", "");
        if (!visitedObjects.has(p.endpointType))
            _aws_cdk_aws_apigatewayv2_alpha_EndpointType(p.endpointType);
        if ("ownershipCertificate" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.EndpointOptions#ownershipCertificate", "");
        if ("securityPolicy" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.EndpointOptions#securityPolicy", "");
        if (!visitedObjects.has(p.securityPolicy))
            _aws_cdk_aws_apigatewayv2_alpha_SecurityPolicy(p.securityPolicy);
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_MTLSConfig(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("bucket" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.MTLSConfig#bucket", "");
        if ("key" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.MTLSConfig#key", "");
        if ("version" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.MTLSConfig#version", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_DomainName(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_IApiMapping(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_ApiMappingProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("api" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.ApiMappingProps#api", "");
        if (!visitedObjects.has(p.api))
            _aws_cdk_aws_apigatewayv2_alpha_IApi(p.api);
        if ("domainName" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.ApiMappingProps#domainName", "");
        if (!visitedObjects.has(p.domainName))
            _aws_cdk_aws_apigatewayv2_alpha_IDomainName(p.domainName);
        if ("apiMappingKey" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.ApiMappingProps#apiMappingKey", "");
        if ("stage" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.ApiMappingProps#stage", "");
        if (!visitedObjects.has(p.stage))
            _aws_cdk_aws_apigatewayv2_alpha_IStage(p.stage);
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_ApiMappingAttributes(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("apiMappingId" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.ApiMappingAttributes#apiMappingId", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_ApiMapping(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_IAuthorizer(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_IHttpApi(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_HttpApiProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("apiName" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpApiProps#apiName", "");
        if ("corsPreflight" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpApiProps#corsPreflight", "");
        if (!visitedObjects.has(p.corsPreflight))
            _aws_cdk_aws_apigatewayv2_alpha_CorsPreflightOptions(p.corsPreflight);
        if ("createDefaultStage" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpApiProps#createDefaultStage", "");
        if ("defaultAuthorizationScopes" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpApiProps#defaultAuthorizationScopes", "");
        if ("defaultAuthorizer" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpApiProps#defaultAuthorizer", "");
        if (!visitedObjects.has(p.defaultAuthorizer))
            _aws_cdk_aws_apigatewayv2_alpha_IHttpRouteAuthorizer(p.defaultAuthorizer);
        if ("defaultDomainMapping" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpApiProps#defaultDomainMapping", "");
        if (!visitedObjects.has(p.defaultDomainMapping))
            _aws_cdk_aws_apigatewayv2_alpha_DomainMappingOptions(p.defaultDomainMapping);
        if ("defaultIntegration" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpApiProps#defaultIntegration", "");
        if (!visitedObjects.has(p.defaultIntegration))
            _aws_cdk_aws_apigatewayv2_alpha_HttpRouteIntegration(p.defaultIntegration);
        if ("description" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpApiProps#description", "");
        if ("disableExecuteApiEndpoint" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpApiProps#disableExecuteApiEndpoint", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_CorsHttpMethod(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        print("@aws-cdk/aws-apigatewayv2-alpha.CorsHttpMethod", "");
        const ns = require("./lib/http/api.js");
        if (Object.values(ns.CorsHttpMethod).filter(x => x === p).length > 1)
            return;
        if (p === ns.CorsHttpMethod.ANY)
            print("@aws-cdk/aws-apigatewayv2-alpha.CorsHttpMethod#ANY", "");
        if (p === ns.CorsHttpMethod.DELETE)
            print("@aws-cdk/aws-apigatewayv2-alpha.CorsHttpMethod#DELETE", "");
        if (p === ns.CorsHttpMethod.GET)
            print("@aws-cdk/aws-apigatewayv2-alpha.CorsHttpMethod#GET", "");
        if (p === ns.CorsHttpMethod.HEAD)
            print("@aws-cdk/aws-apigatewayv2-alpha.CorsHttpMethod#HEAD", "");
        if (p === ns.CorsHttpMethod.OPTIONS)
            print("@aws-cdk/aws-apigatewayv2-alpha.CorsHttpMethod#OPTIONS", "");
        if (p === ns.CorsHttpMethod.PATCH)
            print("@aws-cdk/aws-apigatewayv2-alpha.CorsHttpMethod#PATCH", "");
        if (p === ns.CorsHttpMethod.POST)
            print("@aws-cdk/aws-apigatewayv2-alpha.CorsHttpMethod#POST", "");
        if (p === ns.CorsHttpMethod.PUT)
            print("@aws-cdk/aws-apigatewayv2-alpha.CorsHttpMethod#PUT", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_CorsPreflightOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("allowCredentials" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.CorsPreflightOptions#allowCredentials", "");
        if ("allowHeaders" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.CorsPreflightOptions#allowHeaders", "");
        if ("allowMethods" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.CorsPreflightOptions#allowMethods", "");
        if (p.allowMethods != null)
            for (const o of p.allowMethods)
                if (!visitedObjects.has(o))
                    _aws_cdk_aws_apigatewayv2_alpha_CorsHttpMethod(o);
        if ("allowOrigins" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.CorsPreflightOptions#allowOrigins", "");
        if ("exposeHeaders" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.CorsPreflightOptions#exposeHeaders", "");
        if ("maxAge" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.CorsPreflightOptions#maxAge", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_AddRoutesOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("path" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.AddRoutesOptions#path", "");
        if ("authorizationScopes" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.AddRoutesOptions#authorizationScopes", "");
        if ("authorizer" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.AddRoutesOptions#authorizer", "");
        if (!visitedObjects.has(p.authorizer))
            _aws_cdk_aws_apigatewayv2_alpha_IHttpRouteAuthorizer(p.authorizer);
        if ("methods" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.AddRoutesOptions#methods", "");
        if (p.methods != null)
            for (const o of p.methods)
                if (!visitedObjects.has(o))
                    _aws_cdk_aws_apigatewayv2_alpha_HttpMethod(o);
        if ("integration" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.BatchHttpRouteOptions#integration", "");
        if (!visitedObjects.has(p.integration))
            _aws_cdk_aws_apigatewayv2_alpha_HttpRouteIntegration(p.integration);
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_HttpApiAttributes(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("httpApiId" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpApiAttributes#httpApiId", "");
        if ("apiEndpoint" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpApiAttributes#apiEndpoint", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_HttpApi(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_IHttpRoute(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_GrantInvokeOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("httpMethods" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.GrantInvokeOptions#httpMethods", "");
        if (p.httpMethods != null)
            for (const o of p.httpMethods)
                if (!visitedObjects.has(o))
                    _aws_cdk_aws_apigatewayv2_alpha_HttpMethod(o);
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_HttpMethod(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        print("@aws-cdk/aws-apigatewayv2-alpha.HttpMethod", "");
        const ns = require("./lib/http/route.js");
        if (Object.values(ns.HttpMethod).filter(x => x === p).length > 1)
            return;
        if (p === ns.HttpMethod.ANY)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpMethod#ANY", "");
        if (p === ns.HttpMethod.DELETE)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpMethod#DELETE", "");
        if (p === ns.HttpMethod.GET)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpMethod#GET", "");
        if (p === ns.HttpMethod.HEAD)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpMethod#HEAD", "");
        if (p === ns.HttpMethod.OPTIONS)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpMethod#OPTIONS", "");
        if (p === ns.HttpMethod.PATCH)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpMethod#PATCH", "");
        if (p === ns.HttpMethod.POST)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpMethod#POST", "");
        if (p === ns.HttpMethod.PUT)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpMethod#PUT", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_HttpRouteKey(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_BatchHttpRouteOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("integration" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.BatchHttpRouteOptions#integration", "");
        if (!visitedObjects.has(p.integration))
            _aws_cdk_aws_apigatewayv2_alpha_HttpRouteIntegration(p.integration);
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_HttpRouteProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("httpApi" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpRouteProps#httpApi", "");
        if (!visitedObjects.has(p.httpApi))
            _aws_cdk_aws_apigatewayv2_alpha_IHttpApi(p.httpApi);
        if ("routeKey" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpRouteProps#routeKey", "");
        if (!visitedObjects.has(p.routeKey))
            _aws_cdk_aws_apigatewayv2_alpha_HttpRouteKey(p.routeKey);
        if ("authorizationScopes" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpRouteProps#authorizationScopes", "");
        if ("authorizer" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpRouteProps#authorizer", "");
        if (!visitedObjects.has(p.authorizer))
            _aws_cdk_aws_apigatewayv2_alpha_IHttpRouteAuthorizer(p.authorizer);
        if ("integration" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.BatchHttpRouteOptions#integration", "");
        if (!visitedObjects.has(p.integration))
            _aws_cdk_aws_apigatewayv2_alpha_HttpRouteIntegration(p.integration);
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_HttpRoute(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_IHttpIntegration(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_HttpIntegrationType(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        print("@aws-cdk/aws-apigatewayv2-alpha.HttpIntegrationType", "");
        const ns = require("./lib/http/integration.js");
        if (Object.values(ns.HttpIntegrationType).filter(x => x === p).length > 1)
            return;
        if (p === ns.HttpIntegrationType.HTTP_PROXY)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpIntegrationType#HTTP_PROXY", "");
        if (p === ns.HttpIntegrationType.AWS_PROXY)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpIntegrationType#AWS_PROXY", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_HttpIntegrationSubtype(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        print("@aws-cdk/aws-apigatewayv2-alpha.HttpIntegrationSubtype", "");
        const ns = require("./lib/http/integration.js");
        if (Object.values(ns.HttpIntegrationSubtype).filter(x => x === p).length > 1)
            return;
        if (p === ns.HttpIntegrationSubtype.EVENTBRIDGE_PUT_EVENTS)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpIntegrationSubtype#EVENTBRIDGE_PUT_EVENTS", "");
        if (p === ns.HttpIntegrationSubtype.SQS_SEND_MESSAGE)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpIntegrationSubtype#SQS_SEND_MESSAGE", "");
        if (p === ns.HttpIntegrationSubtype.SQS_RECEIVE_MESSAGE)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpIntegrationSubtype#SQS_RECEIVE_MESSAGE", "");
        if (p === ns.HttpIntegrationSubtype.SQS_DELETE_MESSAGE)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpIntegrationSubtype#SQS_DELETE_MESSAGE", "");
        if (p === ns.HttpIntegrationSubtype.SQS_PURGE_QUEUE)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpIntegrationSubtype#SQS_PURGE_QUEUE", "");
        if (p === ns.HttpIntegrationSubtype.APPCONFIG_GET_CONFIGURATION)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpIntegrationSubtype#APPCONFIG_GET_CONFIGURATION", "");
        if (p === ns.HttpIntegrationSubtype.KINESIS_PUT_RECORD)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpIntegrationSubtype#KINESIS_PUT_RECORD", "");
        if (p === ns.HttpIntegrationSubtype.STEPFUNCTIONS_START_EXECUTION)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpIntegrationSubtype#STEPFUNCTIONS_START_EXECUTION", "");
        if (p === ns.HttpIntegrationSubtype.STEPFUNCTIONS_START_SYNC_EXECUTION)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpIntegrationSubtype#STEPFUNCTIONS_START_SYNC_EXECUTION", "");
        if (p === ns.HttpIntegrationSubtype.STEPFUNCTIONS_STOP_EXECUTION)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpIntegrationSubtype#STEPFUNCTIONS_STOP_EXECUTION", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_IntegrationCredentials(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_HttpConnectionType(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        print("@aws-cdk/aws-apigatewayv2-alpha.HttpConnectionType", "");
        const ns = require("./lib/http/integration.js");
        if (Object.values(ns.HttpConnectionType).filter(x => x === p).length > 1)
            return;
        if (p === ns.HttpConnectionType.VPC_LINK)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpConnectionType#VPC_LINK", "");
        if (p === ns.HttpConnectionType.INTERNET)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpConnectionType#INTERNET", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_PayloadFormatVersion(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_HttpIntegrationProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("httpApi" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpIntegrationProps#httpApi", "");
        if (!visitedObjects.has(p.httpApi))
            _aws_cdk_aws_apigatewayv2_alpha_IHttpApi(p.httpApi);
        if ("integrationType" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpIntegrationProps#integrationType", "");
        if (!visitedObjects.has(p.integrationType))
            _aws_cdk_aws_apigatewayv2_alpha_HttpIntegrationType(p.integrationType);
        if ("connectionId" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpIntegrationProps#connectionId", "");
        if ("connectionType" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpIntegrationProps#connectionType", "");
        if (!visitedObjects.has(p.connectionType))
            _aws_cdk_aws_apigatewayv2_alpha_HttpConnectionType(p.connectionType);
        if ("credentials" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpIntegrationProps#credentials", "");
        if (!visitedObjects.has(p.credentials))
            _aws_cdk_aws_apigatewayv2_alpha_IntegrationCredentials(p.credentials);
        if ("integrationSubtype" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpIntegrationProps#integrationSubtype", "");
        if (!visitedObjects.has(p.integrationSubtype))
            _aws_cdk_aws_apigatewayv2_alpha_HttpIntegrationSubtype(p.integrationSubtype);
        if ("integrationUri" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpIntegrationProps#integrationUri", "");
        if ("method" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpIntegrationProps#method", "");
        if (!visitedObjects.has(p.method))
            _aws_cdk_aws_apigatewayv2_alpha_HttpMethod(p.method);
        if ("parameterMapping" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpIntegrationProps#parameterMapping", "");
        if (!visitedObjects.has(p.parameterMapping))
            _aws_cdk_aws_apigatewayv2_alpha_ParameterMapping(p.parameterMapping);
        if ("payloadFormatVersion" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpIntegrationProps#payloadFormatVersion", "");
        if (!visitedObjects.has(p.payloadFormatVersion))
            _aws_cdk_aws_apigatewayv2_alpha_PayloadFormatVersion(p.payloadFormatVersion);
        if ("secureServerName" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpIntegrationProps#secureServerName", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_HttpIntegration(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_HttpRouteIntegrationBindOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("route" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegrationBindOptions#route", "");
        if (!visitedObjects.has(p.route))
            _aws_cdk_aws_apigatewayv2_alpha_IHttpRoute(p.route);
        if ("scope" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegrationBindOptions#scope", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_HttpRouteIntegration(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_HttpRouteIntegrationConfig(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("payloadFormatVersion" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegrationConfig#payloadFormatVersion", "");
        if (!visitedObjects.has(p.payloadFormatVersion))
            _aws_cdk_aws_apigatewayv2_alpha_PayloadFormatVersion(p.payloadFormatVersion);
        if ("type" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegrationConfig#type", "");
        if (!visitedObjects.has(p.type))
            _aws_cdk_aws_apigatewayv2_alpha_HttpIntegrationType(p.type);
        if ("connectionId" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegrationConfig#connectionId", "");
        if ("connectionType" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegrationConfig#connectionType", "");
        if (!visitedObjects.has(p.connectionType))
            _aws_cdk_aws_apigatewayv2_alpha_HttpConnectionType(p.connectionType);
        if ("credentials" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegrationConfig#credentials", "");
        if (!visitedObjects.has(p.credentials))
            _aws_cdk_aws_apigatewayv2_alpha_IntegrationCredentials(p.credentials);
        if ("method" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegrationConfig#method", "");
        if (!visitedObjects.has(p.method))
            _aws_cdk_aws_apigatewayv2_alpha_HttpMethod(p.method);
        if ("parameterMapping" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegrationConfig#parameterMapping", "");
        if (!visitedObjects.has(p.parameterMapping))
            _aws_cdk_aws_apigatewayv2_alpha_ParameterMapping(p.parameterMapping);
        if ("secureServerName" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegrationConfig#secureServerName", "");
        if ("subtype" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegrationConfig#subtype", "");
        if (!visitedObjects.has(p.subtype))
            _aws_cdk_aws_apigatewayv2_alpha_HttpIntegrationSubtype(p.subtype);
        if ("uri" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegrationConfig#uri", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_IHttpStage(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_HttpStageOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("stageName" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpStageOptions#stageName", "");
        if ("autoDeploy" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.StageOptions#autoDeploy", "");
        if ("domainMapping" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.StageOptions#domainMapping", "");
        if (!visitedObjects.has(p.domainMapping))
            _aws_cdk_aws_apigatewayv2_alpha_DomainMappingOptions(p.domainMapping);
        if ("throttle" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.StageOptions#throttle", "");
        if (!visitedObjects.has(p.throttle))
            _aws_cdk_aws_apigatewayv2_alpha_ThrottleSettings(p.throttle);
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_HttpStageProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("httpApi" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpStageProps#httpApi", "");
        if (!visitedObjects.has(p.httpApi))
            _aws_cdk_aws_apigatewayv2_alpha_IHttpApi(p.httpApi);
        if ("stageName" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpStageOptions#stageName", "");
        if ("autoDeploy" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.StageOptions#autoDeploy", "");
        if ("domainMapping" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.StageOptions#domainMapping", "");
        if (!visitedObjects.has(p.domainMapping))
            _aws_cdk_aws_apigatewayv2_alpha_DomainMappingOptions(p.domainMapping);
        if ("throttle" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.StageOptions#throttle", "");
        if (!visitedObjects.has(p.throttle))
            _aws_cdk_aws_apigatewayv2_alpha_ThrottleSettings(p.throttle);
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_HttpStageAttributes(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("api" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpStageAttributes#api", "");
        if (!visitedObjects.has(p.api))
            _aws_cdk_aws_apigatewayv2_alpha_IHttpApi(p.api);
        if ("stageName" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.StageAttributes#stageName", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_HttpStage(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_IVpcLink(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_VpcLinkProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("vpc" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.VpcLinkProps#vpc", "");
        if ("securityGroups" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.VpcLinkProps#securityGroups", "");
        if (p.securityGroups != null)
            for (const o of p.securityGroups)
                if (!visitedObjects.has(o))
                    require("aws-cdk-lib/.warnings.jsii.js").aws_cdk_lib_aws_ec2_ISecurityGroup(o);
        if ("subnets" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.VpcLinkProps#subnets", "");
        if ("vpcLinkName" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.VpcLinkProps#vpcLinkName", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_VpcLinkAttributes(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("vpc" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.VpcLinkAttributes#vpc", "");
        if ("vpcLinkId" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.VpcLinkAttributes#vpcLinkId", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_VpcLink(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_HttpAuthorizerType(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        print("@aws-cdk/aws-apigatewayv2-alpha.HttpAuthorizerType", "");
        const ns = require("./lib/http/authorizer.js");
        if (Object.values(ns.HttpAuthorizerType).filter(x => x === p).length > 1)
            return;
        if (p === ns.HttpAuthorizerType.IAM)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpAuthorizerType#IAM", "");
        if (p === ns.HttpAuthorizerType.JWT)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpAuthorizerType#JWT", "");
        if (p === ns.HttpAuthorizerType.LAMBDA)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpAuthorizerType#LAMBDA", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_AuthorizerPayloadVersion(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        print("@aws-cdk/aws-apigatewayv2-alpha.AuthorizerPayloadVersion", "");
        const ns = require("./lib/http/authorizer.js");
        if (Object.values(ns.AuthorizerPayloadVersion).filter(x => x === p).length > 1)
            return;
        if (p === ns.AuthorizerPayloadVersion.VERSION_1_0)
            print("@aws-cdk/aws-apigatewayv2-alpha.AuthorizerPayloadVersion#VERSION_1_0", "");
        if (p === ns.AuthorizerPayloadVersion.VERSION_2_0)
            print("@aws-cdk/aws-apigatewayv2-alpha.AuthorizerPayloadVersion#VERSION_2_0", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_HttpAuthorizerProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("httpApi" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpAuthorizerProps#httpApi", "");
        if (!visitedObjects.has(p.httpApi))
            _aws_cdk_aws_apigatewayv2_alpha_IHttpApi(p.httpApi);
        if ("identitySource" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpAuthorizerProps#identitySource", "");
        if ("type" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpAuthorizerProps#type", "");
        if (!visitedObjects.has(p.type))
            _aws_cdk_aws_apigatewayv2_alpha_HttpAuthorizerType(p.type);
        if ("authorizerName" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpAuthorizerProps#authorizerName", "");
        if ("authorizerUri" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpAuthorizerProps#authorizerUri", "");
        if ("enableSimpleResponses" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpAuthorizerProps#enableSimpleResponses", "");
        if ("jwtAudience" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpAuthorizerProps#jwtAudience", "");
        if ("jwtIssuer" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpAuthorizerProps#jwtIssuer", "");
        if ("payloadFormatVersion" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpAuthorizerProps#payloadFormatVersion", "");
        if (!visitedObjects.has(p.payloadFormatVersion))
            _aws_cdk_aws_apigatewayv2_alpha_AuthorizerPayloadVersion(p.payloadFormatVersion);
        if ("resultsCacheTtl" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpAuthorizerProps#resultsCacheTtl", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_IHttpAuthorizer(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_HttpAuthorizerAttributes(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("authorizerId" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpAuthorizerAttributes#authorizerId", "");
        if ("authorizerType" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpAuthorizerAttributes#authorizerType", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_HttpAuthorizer(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_HttpRouteAuthorizerBindOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("route" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpRouteAuthorizerBindOptions#route", "");
        if (!visitedObjects.has(p.route))
            _aws_cdk_aws_apigatewayv2_alpha_IHttpRoute(p.route);
        if ("scope" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpRouteAuthorizerBindOptions#scope", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_HttpRouteAuthorizerConfig(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("authorizationType" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpRouteAuthorizerConfig#authorizationType", "");
        if ("authorizationScopes" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpRouteAuthorizerConfig#authorizationScopes", "");
        if ("authorizerId" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.HttpRouteAuthorizerConfig#authorizerId", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_IHttpRouteAuthorizer(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_HttpNoneAuthorizer(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_IWebSocketApi(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_WebSocketApiKeySelectionExpression(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_WebSocketApiProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("apiKeySelectionExpression" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketApiProps#apiKeySelectionExpression", "");
        if (!visitedObjects.has(p.apiKeySelectionExpression))
            _aws_cdk_aws_apigatewayv2_alpha_WebSocketApiKeySelectionExpression(p.apiKeySelectionExpression);
        if ("apiName" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketApiProps#apiName", "");
        if ("connectRouteOptions" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketApiProps#connectRouteOptions", "");
        if (!visitedObjects.has(p.connectRouteOptions))
            _aws_cdk_aws_apigatewayv2_alpha_WebSocketRouteOptions(p.connectRouteOptions);
        if ("defaultRouteOptions" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketApiProps#defaultRouteOptions", "");
        if (!visitedObjects.has(p.defaultRouteOptions))
            _aws_cdk_aws_apigatewayv2_alpha_WebSocketRouteOptions(p.defaultRouteOptions);
        if ("description" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketApiProps#description", "");
        if ("disconnectRouteOptions" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketApiProps#disconnectRouteOptions", "");
        if (!visitedObjects.has(p.disconnectRouteOptions))
            _aws_cdk_aws_apigatewayv2_alpha_WebSocketRouteOptions(p.disconnectRouteOptions);
        if ("routeSelectionExpression" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketApiProps#routeSelectionExpression", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_WebSocketApiAttributes(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("webSocketId" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketApiAttributes#webSocketId", "");
        if ("apiEndpoint" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketApiAttributes#apiEndpoint", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_WebSocketApi(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_IWebSocketRoute(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_WebSocketRouteOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("integration" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteOptions#integration", "");
        if (!visitedObjects.has(p.integration))
            _aws_cdk_aws_apigatewayv2_alpha_WebSocketRouteIntegration(p.integration);
        if ("authorizer" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteOptions#authorizer", "");
        if (!visitedObjects.has(p.authorizer))
            _aws_cdk_aws_apigatewayv2_alpha_IWebSocketRouteAuthorizer(p.authorizer);
        if ("returnResponse" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteOptions#returnResponse", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_WebSocketRouteProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("routeKey" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteProps#routeKey", "");
        if ("webSocketApi" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteProps#webSocketApi", "");
        if (!visitedObjects.has(p.webSocketApi))
            _aws_cdk_aws_apigatewayv2_alpha_IWebSocketApi(p.webSocketApi);
        if ("apiKeyRequired" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteProps#apiKeyRequired", "");
        if ("integration" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteOptions#integration", "");
        if (!visitedObjects.has(p.integration))
            _aws_cdk_aws_apigatewayv2_alpha_WebSocketRouteIntegration(p.integration);
        if ("authorizer" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteOptions#authorizer", "");
        if (!visitedObjects.has(p.authorizer))
            _aws_cdk_aws_apigatewayv2_alpha_IWebSocketRouteAuthorizer(p.authorizer);
        if ("returnResponse" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteOptions#returnResponse", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_WebSocketRoute(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_IWebSocketStage(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_WebSocketStageProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("stageName" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketStageProps#stageName", "");
        if ("webSocketApi" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketStageProps#webSocketApi", "");
        if (!visitedObjects.has(p.webSocketApi))
            _aws_cdk_aws_apigatewayv2_alpha_IWebSocketApi(p.webSocketApi);
        if ("autoDeploy" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.StageOptions#autoDeploy", "");
        if ("domainMapping" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.StageOptions#domainMapping", "");
        if (!visitedObjects.has(p.domainMapping))
            _aws_cdk_aws_apigatewayv2_alpha_DomainMappingOptions(p.domainMapping);
        if ("throttle" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.StageOptions#throttle", "");
        if (!visitedObjects.has(p.throttle))
            _aws_cdk_aws_apigatewayv2_alpha_ThrottleSettings(p.throttle);
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_WebSocketStageAttributes(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("api" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketStageAttributes#api", "");
        if (!visitedObjects.has(p.api))
            _aws_cdk_aws_apigatewayv2_alpha_IWebSocketApi(p.api);
        if ("stageName" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.StageAttributes#stageName", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_WebSocketStage(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_IWebSocketIntegration(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_WebSocketIntegrationType(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketIntegrationType", "");
        const ns = require("./lib/websocket/integration.js");
        if (Object.values(ns.WebSocketIntegrationType).filter(x => x === p).length > 1)
            return;
        if (p === ns.WebSocketIntegrationType.AWS_PROXY)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketIntegrationType#AWS_PROXY", "");
        if (p === ns.WebSocketIntegrationType.MOCK)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketIntegrationType#MOCK", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_WebSocketIntegrationProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("integrationType" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketIntegrationProps#integrationType", "");
        if (!visitedObjects.has(p.integrationType))
            _aws_cdk_aws_apigatewayv2_alpha_WebSocketIntegrationType(p.integrationType);
        if ("integrationUri" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketIntegrationProps#integrationUri", "");
        if ("webSocketApi" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketIntegrationProps#webSocketApi", "");
        if (!visitedObjects.has(p.webSocketApi))
            _aws_cdk_aws_apigatewayv2_alpha_IWebSocketApi(p.webSocketApi);
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_WebSocketIntegration(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_WebSocketRouteIntegrationBindOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("route" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteIntegrationBindOptions#route", "");
        if (!visitedObjects.has(p.route))
            _aws_cdk_aws_apigatewayv2_alpha_IWebSocketRoute(p.route);
        if ("scope" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteIntegrationBindOptions#scope", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_WebSocketRouteIntegration(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_WebSocketRouteIntegrationConfig(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("type" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteIntegrationConfig#type", "");
        if (!visitedObjects.has(p.type))
            _aws_cdk_aws_apigatewayv2_alpha_WebSocketIntegrationType(p.type);
        if ("uri" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteIntegrationConfig#uri", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_WebSocketAuthorizerType(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketAuthorizerType", "");
        const ns = require("./lib/websocket/authorizer.js");
        if (Object.values(ns.WebSocketAuthorizerType).filter(x => x === p).length > 1)
            return;
        if (p === ns.WebSocketAuthorizerType.LAMBDA)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketAuthorizerType#LAMBDA", "");
        if (p === ns.WebSocketAuthorizerType.IAM)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketAuthorizerType#IAM", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_WebSocketAuthorizerProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("identitySource" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketAuthorizerProps#identitySource", "");
        if ("type" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketAuthorizerProps#type", "");
        if (!visitedObjects.has(p.type))
            _aws_cdk_aws_apigatewayv2_alpha_WebSocketAuthorizerType(p.type);
        if ("webSocketApi" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketAuthorizerProps#webSocketApi", "");
        if (!visitedObjects.has(p.webSocketApi))
            _aws_cdk_aws_apigatewayv2_alpha_IWebSocketApi(p.webSocketApi);
        if ("authorizerName" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketAuthorizerProps#authorizerName", "");
        if ("authorizerUri" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketAuthorizerProps#authorizerUri", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_IWebSocketAuthorizer(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_WebSocketAuthorizerAttributes(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("authorizerId" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketAuthorizerAttributes#authorizerId", "");
        if ("authorizerType" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketAuthorizerAttributes#authorizerType", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_WebSocketAuthorizer(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_WebSocketRouteAuthorizerBindOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("route" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteAuthorizerBindOptions#route", "");
        if (!visitedObjects.has(p.route))
            _aws_cdk_aws_apigatewayv2_alpha_IWebSocketRoute(p.route);
        if ("scope" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteAuthorizerBindOptions#scope", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_WebSocketRouteAuthorizerConfig(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("authorizationType" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteAuthorizerConfig#authorizationType", "");
        if ("authorizerId" in p)
            print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteAuthorizerConfig#authorizerId", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_apigatewayv2_alpha_IWebSocketRouteAuthorizer(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_WebSocketNoneAuthorizer(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_IMappingValue(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_MappingValue(p) {
}
function _aws_cdk_aws_apigatewayv2_alpha_ParameterMapping(p) {
}
function print(name, deprecationMessage) {
    const deprecated = process.env.JSII_DEPRECATED;
    const deprecationMode = ["warn", "fail", "quiet"].includes(deprecated) ? deprecated : "warn";
    const message = `${name} is deprecated.\n  ${deprecationMessage.trim()}\n  This API will be removed in the next major release.`;
    switch (deprecationMode) {
        case "fail":
            throw new DeprecationError(message);
        case "warn":
            console.warn("[WARNING]", message);
            break;
    }
}
function getPropertyDescriptor(obj, prop) {
    const descriptor = Object.getOwnPropertyDescriptor(obj, prop);
    if (descriptor) {
        return descriptor;
    }
    const proto = Object.getPrototypeOf(obj);
    const prototypeDescriptor = proto && getPropertyDescriptor(proto, prop);
    if (prototypeDescriptor) {
        return prototypeDescriptor;
    }
    return {};
}
const visitedObjects = new Set();
class DeprecationError extends Error {
    constructor(...args) {
        super(...args);
        Object.defineProperty(this, "name", {
            configurable: false,
            enumerable: true,
            value: "DeprecationError",
            writable: false,
        });
    }
}
module.exports = { print, getPropertyDescriptor, DeprecationError, _aws_cdk_aws_apigatewayv2_alpha_IApi, _aws_cdk_aws_apigatewayv2_alpha_IIntegration, _aws_cdk_aws_apigatewayv2_alpha_IRoute, _aws_cdk_aws_apigatewayv2_alpha_IStage, _aws_cdk_aws_apigatewayv2_alpha_DomainMappingOptions, _aws_cdk_aws_apigatewayv2_alpha_StageOptions, _aws_cdk_aws_apigatewayv2_alpha_StageAttributes, _aws_cdk_aws_apigatewayv2_alpha_ThrottleSettings, _aws_cdk_aws_apigatewayv2_alpha_SecurityPolicy, _aws_cdk_aws_apigatewayv2_alpha_EndpointType, _aws_cdk_aws_apigatewayv2_alpha_IDomainName, _aws_cdk_aws_apigatewayv2_alpha_DomainNameAttributes, _aws_cdk_aws_apigatewayv2_alpha_DomainNameProps, _aws_cdk_aws_apigatewayv2_alpha_EndpointOptions, _aws_cdk_aws_apigatewayv2_alpha_MTLSConfig, _aws_cdk_aws_apigatewayv2_alpha_DomainName, _aws_cdk_aws_apigatewayv2_alpha_IApiMapping, _aws_cdk_aws_apigatewayv2_alpha_ApiMappingProps, _aws_cdk_aws_apigatewayv2_alpha_ApiMappingAttributes, _aws_cdk_aws_apigatewayv2_alpha_ApiMapping, _aws_cdk_aws_apigatewayv2_alpha_IAuthorizer, _aws_cdk_aws_apigatewayv2_alpha_IHttpApi, _aws_cdk_aws_apigatewayv2_alpha_HttpApiProps, _aws_cdk_aws_apigatewayv2_alpha_CorsHttpMethod, _aws_cdk_aws_apigatewayv2_alpha_CorsPreflightOptions, _aws_cdk_aws_apigatewayv2_alpha_AddRoutesOptions, _aws_cdk_aws_apigatewayv2_alpha_HttpApiAttributes, _aws_cdk_aws_apigatewayv2_alpha_HttpApi, _aws_cdk_aws_apigatewayv2_alpha_IHttpRoute, _aws_cdk_aws_apigatewayv2_alpha_GrantInvokeOptions, _aws_cdk_aws_apigatewayv2_alpha_HttpMethod, _aws_cdk_aws_apigatewayv2_alpha_HttpRouteKey, _aws_cdk_aws_apigatewayv2_alpha_BatchHttpRouteOptions, _aws_cdk_aws_apigatewayv2_alpha_HttpRouteProps, _aws_cdk_aws_apigatewayv2_alpha_HttpRoute, _aws_cdk_aws_apigatewayv2_alpha_IHttpIntegration, _aws_cdk_aws_apigatewayv2_alpha_HttpIntegrationType, _aws_cdk_aws_apigatewayv2_alpha_HttpIntegrationSubtype, _aws_cdk_aws_apigatewayv2_alpha_IntegrationCredentials, _aws_cdk_aws_apigatewayv2_alpha_HttpConnectionType, _aws_cdk_aws_apigatewayv2_alpha_PayloadFormatVersion, _aws_cdk_aws_apigatewayv2_alpha_HttpIntegrationProps, _aws_cdk_aws_apigatewayv2_alpha_HttpIntegration, _aws_cdk_aws_apigatewayv2_alpha_HttpRouteIntegrationBindOptions, _aws_cdk_aws_apigatewayv2_alpha_HttpRouteIntegration, _aws_cdk_aws_apigatewayv2_alpha_HttpRouteIntegrationConfig, _aws_cdk_aws_apigatewayv2_alpha_IHttpStage, _aws_cdk_aws_apigatewayv2_alpha_HttpStageOptions, _aws_cdk_aws_apigatewayv2_alpha_HttpStageProps, _aws_cdk_aws_apigatewayv2_alpha_HttpStageAttributes, _aws_cdk_aws_apigatewayv2_alpha_HttpStage, _aws_cdk_aws_apigatewayv2_alpha_IVpcLink, _aws_cdk_aws_apigatewayv2_alpha_VpcLinkProps, _aws_cdk_aws_apigatewayv2_alpha_VpcLinkAttributes, _aws_cdk_aws_apigatewayv2_alpha_VpcLink, _aws_cdk_aws_apigatewayv2_alpha_HttpAuthorizerType, _aws_cdk_aws_apigatewayv2_alpha_AuthorizerPayloadVersion, _aws_cdk_aws_apigatewayv2_alpha_HttpAuthorizerProps, _aws_cdk_aws_apigatewayv2_alpha_IHttpAuthorizer, _aws_cdk_aws_apigatewayv2_alpha_HttpAuthorizerAttributes, _aws_cdk_aws_apigatewayv2_alpha_HttpAuthorizer, _aws_cdk_aws_apigatewayv2_alpha_HttpRouteAuthorizerBindOptions, _aws_cdk_aws_apigatewayv2_alpha_HttpRouteAuthorizerConfig, _aws_cdk_aws_apigatewayv2_alpha_IHttpRouteAuthorizer, _aws_cdk_aws_apigatewayv2_alpha_HttpNoneAuthorizer, _aws_cdk_aws_apigatewayv2_alpha_IWebSocketApi, _aws_cdk_aws_apigatewayv2_alpha_WebSocketApiKeySelectionExpression, _aws_cdk_aws_apigatewayv2_alpha_WebSocketApiProps, _aws_cdk_aws_apigatewayv2_alpha_WebSocketApiAttributes, _aws_cdk_aws_apigatewayv2_alpha_WebSocketApi, _aws_cdk_aws_apigatewayv2_alpha_IWebSocketRoute, _aws_cdk_aws_apigatewayv2_alpha_WebSocketRouteOptions, _aws_cdk_aws_apigatewayv2_alpha_WebSocketRouteProps, _aws_cdk_aws_apigatewayv2_alpha_WebSocketRoute, _aws_cdk_aws_apigatewayv2_alpha_IWebSocketStage, _aws_cdk_aws_apigatewayv2_alpha_WebSocketStageProps, _aws_cdk_aws_apigatewayv2_alpha_WebSocketStageAttributes, _aws_cdk_aws_apigatewayv2_alpha_WebSocketStage, _aws_cdk_aws_apigatewayv2_alpha_IWebSocketIntegration, _aws_cdk_aws_apigatewayv2_alpha_WebSocketIntegrationType, _aws_cdk_aws_apigatewayv2_alpha_WebSocketIntegrationProps, _aws_cdk_aws_apigatewayv2_alpha_WebSocketIntegration, _aws_cdk_aws_apigatewayv2_alpha_WebSocketRouteIntegrationBindOptions, _aws_cdk_aws_apigatewayv2_alpha_WebSocketRouteIntegration, _aws_cdk_aws_apigatewayv2_alpha_WebSocketRouteIntegrationConfig, _aws_cdk_aws_apigatewayv2_alpha_WebSocketAuthorizerType, _aws_cdk_aws_apigatewayv2_alpha_WebSocketAuthorizerProps, _aws_cdk_aws_apigatewayv2_alpha_IWebSocketAuthorizer, _aws_cdk_aws_apigatewayv2_alpha_WebSocketAuthorizerAttributes, _aws_cdk_aws_apigatewayv2_alpha_WebSocketAuthorizer, _aws_cdk_aws_apigatewayv2_alpha_WebSocketRouteAuthorizerBindOptions, _aws_cdk_aws_apigatewayv2_alpha_WebSocketRouteAuthorizerConfig, _aws_cdk_aws_apigatewayv2_alpha_IWebSocketRouteAuthorizer, _aws_cdk_aws_apigatewayv2_alpha_WebSocketNoneAuthorizer, _aws_cdk_aws_apigatewayv2_alpha_IMappingValue, _aws_cdk_aws_apigatewayv2_alpha_MappingValue, _aws_cdk_aws_apigatewayv2_alpha_ParameterMapping };
