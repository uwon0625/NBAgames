"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpApi = exports.CorsHttpMethod = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const route_1 = require("./route");
const stage_1 = require("./stage");
const vpc_link_1 = require("./vpc-link");
const aws_apigatewayv2_1 = require("aws-cdk-lib/aws-apigatewayv2");
const base_1 = require("../common/base");
/**
 * Supported CORS HTTP methods
 */
var CorsHttpMethod;
(function (CorsHttpMethod) {
    /** HTTP ANY */
    CorsHttpMethod["ANY"] = "*";
    /** HTTP DELETE */
    CorsHttpMethod["DELETE"] = "DELETE";
    /** HTTP GET */
    CorsHttpMethod["GET"] = "GET";
    /** HTTP HEAD */
    CorsHttpMethod["HEAD"] = "HEAD";
    /** HTTP OPTIONS */
    CorsHttpMethod["OPTIONS"] = "OPTIONS";
    /** HTTP PATCH */
    CorsHttpMethod["PATCH"] = "PATCH";
    /** HTTP POST */
    CorsHttpMethod["POST"] = "POST";
    /** HTTP PUT */
    CorsHttpMethod["PUT"] = "PUT";
})(CorsHttpMethod || (exports.CorsHttpMethod = CorsHttpMethod = {}));
class HttpApiBase extends base_1.ApiBase {
    constructor() {
        super(...arguments);
        this.vpcLinks = {};
    }
    metricClientError(props) {
        return this.metric('4xx', { statistic: 'Sum', ...props });
    }
    metricServerError(props) {
        return this.metric('5xx', { statistic: 'Sum', ...props });
    }
    metricDataProcessed(props) {
        return this.metric('DataProcessed', { statistic: 'Sum', ...props });
    }
    metricCount(props) {
        return this.metric('Count', { statistic: 'SampleCount', ...props });
    }
    metricIntegrationLatency(props) {
        return this.metric('IntegrationLatency', props);
    }
    metricLatency(props) {
        return this.metric('Latency', props);
    }
    addVpcLink(options) {
        const { vpcId } = options.vpc;
        if (vpcId in this.vpcLinks) {
            return this.vpcLinks[vpcId];
        }
        const count = Object.keys(this.vpcLinks).length + 1;
        const vpcLink = new vpc_link_1.VpcLink(this, `VpcLink-${count}`, options);
        this.vpcLinks[vpcId] = vpcLink;
        return vpcLink;
    }
}
/**
 * Create a new API Gateway HTTP API endpoint.
 * @resource AWS::ApiGatewayV2::Api
 */
class HttpApi extends HttpApiBase {
    /**
     * Import an existing HTTP API into this CDK app.
     */
    static fromHttpApiAttributes(scope, id, attrs) {
        try {
            jsiiDeprecationWarnings.print("@aws-cdk/aws-apigatewayv2-alpha.HttpApi#fromHttpApiAttributes", "");
            jsiiDeprecationWarnings._aws_cdk_aws_apigatewayv2_alpha_HttpApiAttributes(attrs);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.fromHttpApiAttributes);
            }
            throw error;
        }
        class Import extends HttpApiBase {
            constructor() {
                super(...arguments);
                this.apiId = attrs.httpApiId;
                this.httpApiId = attrs.httpApiId;
                this._apiEndpoint = attrs.apiEndpoint;
            }
            get apiEndpoint() {
                if (!this._apiEndpoint) {
                    throw new Error('apiEndpoint is not configured on the imported HttpApi.');
                }
                return this._apiEndpoint;
            }
        }
        return new Import(scope, id);
    }
    constructor(scope, id, props) {
        super(scope, id);
        try {
            jsiiDeprecationWarnings.print("@aws-cdk/aws-apigatewayv2-alpha.HttpApi", "");
            jsiiDeprecationWarnings._aws_cdk_aws_apigatewayv2_alpha_HttpApiProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, HttpApi);
            }
            throw error;
        }
        this.httpApiName = props?.apiName ?? id;
        this.disableExecuteApiEndpoint = props?.disableExecuteApiEndpoint;
        let corsConfiguration;
        if (props?.corsPreflight) {
            const cors = props.corsPreflight;
            if (cors.allowOrigins && cors.allowOrigins.includes('*') && cors.allowCredentials) {
                throw new Error("CORS preflight - allowCredentials is not supported when allowOrigin is '*'");
            }
            const { allowCredentials, allowHeaders, allowMethods, allowOrigins, exposeHeaders, maxAge, } = props.corsPreflight;
            corsConfiguration = {
                allowCredentials,
                allowHeaders,
                allowMethods,
                allowOrigins,
                exposeHeaders,
                maxAge: maxAge?.toSeconds(),
            };
        }
        const apiProps = {
            name: this.httpApiName,
            protocolType: 'HTTP',
            corsConfiguration,
            description: props?.description,
            disableExecuteApiEndpoint: this.disableExecuteApiEndpoint,
        };
        const resource = new aws_apigatewayv2_1.CfnApi(this, 'Resource', apiProps);
        this.apiId = resource.ref;
        this.httpApiId = resource.ref;
        this._apiEndpoint = resource.attrApiEndpoint;
        this.defaultAuthorizer = props?.defaultAuthorizer;
        this.defaultAuthorizationScopes = props?.defaultAuthorizationScopes;
        if (props?.defaultIntegration) {
            new route_1.HttpRoute(this, 'DefaultRoute', {
                httpApi: this,
                routeKey: route_1.HttpRouteKey.DEFAULT,
                integration: props.defaultIntegration,
                authorizer: props.defaultAuthorizer,
                authorizationScopes: props.defaultAuthorizationScopes,
            });
        }
        if (props?.createDefaultStage === undefined || props.createDefaultStage === true) {
            this.defaultStage = new stage_1.HttpStage(this, 'DefaultStage', {
                httpApi: this,
                autoDeploy: true,
                domainMapping: props?.defaultDomainMapping,
            });
            // to ensure the domain is ready before creating the default stage
            if (props?.defaultDomainMapping) {
                this.defaultStage.node.addDependency(props.defaultDomainMapping.domainName);
            }
        }
        if (props?.createDefaultStage === false && props.defaultDomainMapping) {
            throw new Error('defaultDomainMapping not supported with createDefaultStage disabled');
        }
    }
    /**
     * Get the default endpoint for this API.
     */
    get apiEndpoint() {
        try {
            jsiiDeprecationWarnings.print("@aws-cdk/aws-apigatewayv2-alpha.HttpApi#apiEndpoint", "");
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, jsiiDeprecationWarnings.getPropertyDescriptor(this, "apiEndpoint").get);
            }
            throw error;
        }
        if (this.disableExecuteApiEndpoint) {
            throw new Error('apiEndpoint is not accessible when disableExecuteApiEndpoint is set to true.');
        }
        return this._apiEndpoint;
    }
    /**
     * Get the URL to the default stage of this API.
     * Returns `undefined` if `createDefaultStage` is unset.
     */
    get url() {
        try {
            jsiiDeprecationWarnings.print("@aws-cdk/aws-apigatewayv2-alpha.HttpApi#url", "");
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, jsiiDeprecationWarnings.getPropertyDescriptor(this, "url").get);
            }
            throw error;
        }
        return this.defaultStage ? this.defaultStage.url : undefined;
    }
    /**
     * Add a new stage.
     */
    addStage(id, options) {
        try {
            jsiiDeprecationWarnings.print("@aws-cdk/aws-apigatewayv2-alpha.HttpApi#addStage", "");
            jsiiDeprecationWarnings._aws_cdk_aws_apigatewayv2_alpha_HttpStageOptions(options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.addStage);
            }
            throw error;
        }
        const stage = new stage_1.HttpStage(this, id, {
            httpApi: this,
            ...options,
        });
        return stage;
    }
    /**
     * Add multiple routes that uses the same configuration. The routes all go to the same path, but for different
     * methods.
     */
    addRoutes(options) {
        try {
            jsiiDeprecationWarnings.print("@aws-cdk/aws-apigatewayv2-alpha.HttpApi#addRoutes", "");
            jsiiDeprecationWarnings._aws_cdk_aws_apigatewayv2_alpha_AddRoutesOptions(options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.addRoutes);
            }
            throw error;
        }
        const methods = options.methods ?? [route_1.HttpMethod.ANY];
        return methods.map((method) => {
            const authorizationScopes = options.authorizationScopes ?? this.defaultAuthorizationScopes;
            return new route_1.HttpRoute(this, `${method}${options.path}`, {
                httpApi: this,
                routeKey: route_1.HttpRouteKey.with(options.path, method),
                integration: options.integration,
                authorizer: options.authorizer ?? this.defaultAuthorizer,
                authorizationScopes,
            });
        });
    }
}
exports.HttpApi = HttpApi;
_a = JSII_RTTI_SYMBOL_1;
HttpApi[_a] = { fqn: "@aws-cdk/aws-apigatewayv2-alpha.HttpApi", version: "2.114.1-alpha.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUtBLG1DQUFxRjtBQUNyRixtQ0FBa0U7QUFDbEUseUNBQW1EO0FBQ25ELG1FQUFtRTtBQUVuRSx5Q0FBeUM7QUFzSnpDOztHQUVHO0FBQ0gsSUFBWSxjQWlCWDtBQWpCRCxXQUFZLGNBQWM7SUFDeEIsZUFBZTtJQUNmLDJCQUFTLENBQUE7SUFDVCxrQkFBa0I7SUFDbEIsbUNBQWlCLENBQUE7SUFDakIsZUFBZTtJQUNmLDZCQUFXLENBQUE7SUFDWCxnQkFBZ0I7SUFDaEIsK0JBQWEsQ0FBQTtJQUNiLG1CQUFtQjtJQUNuQixxQ0FBbUIsQ0FBQTtJQUNuQixpQkFBaUI7SUFDakIsaUNBQWUsQ0FBQTtJQUNmLGdCQUFnQjtJQUNoQiwrQkFBYSxDQUFBO0lBQ2IsZUFBZTtJQUNmLDZCQUFXLENBQUE7QUFDYixDQUFDLEVBakJXLGNBQWMsOEJBQWQsY0FBYyxRQWlCekI7QUE4RUQsTUFBZSxXQUFZLFNBQVEsY0FBTztJQUExQzs7UUFLVSxhQUFRLEdBQTRCLEVBQUUsQ0FBQztJQXNDakQsQ0FBQztJQXBDUSxpQkFBaUIsQ0FBQyxLQUFxQjtRQUM1QyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxHQUFHLEtBQUssRUFBRSxDQUFDLENBQUM7S0FDM0Q7SUFFTSxpQkFBaUIsQ0FBQyxLQUFxQjtRQUM1QyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxHQUFHLEtBQUssRUFBRSxDQUFDLENBQUM7S0FDM0Q7SUFFTSxtQkFBbUIsQ0FBQyxLQUFxQjtRQUM5QyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxFQUFFLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxHQUFHLEtBQUssRUFBRSxDQUFDLENBQUM7S0FD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LE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxJQUFJLENBQUMsa0JBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNwRCxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUM1QixNQUFNLG1CQUFtQixHQUFHLE9BQU8sQ0FBQyxtQkFBbUIsSUFBSSxJQUFJLENBQUMsMEJBQTBCLENBQUM7WUFFM0YsT0FBTyxJQUFJLGlCQUFTLENBQUMsSUFBSSxFQUFFLEdBQUcsTUFBTSxHQUFHLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRTtnQkFDckQsT0FBTyxFQUFFLElBQUk7Z0JBQ2IsUUFBUSxFQUFFLG9CQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDO2dCQUNqRCxXQUFXLEVBQUUsT0FBTyxDQUFDLFdBQVc7Z0JBQ2hDLFVBQVUsRUFBRSxPQUFPLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxpQkFBaUI7Z0JBQ3hELG1CQUFtQjthQUNwQixDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztLQUNKOztBQTFLSCwwQkEyS0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNZXRyaWMsIE1ldHJpY09wdGlvbnMgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtY2xvdWR3YXRjaCc7XG5pbXBvcnQgeyBEdXJhdGlvbiB9IGZyb20gJ2F3cy1jZGstbGliL2NvcmUnO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgeyBJSHR0cFJvdXRlQXV0aG9yaXplciB9IGZyb20gJy4vYXV0aG9yaXplcic7XG5pbXBvcnQgeyBIdHRwUm91dGVJbnRlZ3JhdGlvbiB9IGZyb20gJy4vaW50ZWdyYXRpb24nO1xuaW1wb3J0IHsgQmF0Y2hIdHRwUm91dGVPcHRpb25zLCBIdHRwTWV0aG9kLCBIdHRwUm91dGUsIEh0dHBSb3V0ZUtleSB9IGZyb20gJy4vcm91dGUnO1xuaW1wb3J0IHsgSUh0dHBTdGFnZSwgSHR0cFN0YWdlLCBIdHRwU3RhZ2VPcHRpb25zIH0gZnJvbSAnLi9zdGFnZSc7XG5pbXBvcnQgeyBWcGNMaW5rLCBWcGNMaW5rUHJvcHMgfSBmcm9tICcuL3ZwYy1saW5rJztcbmltcG9ydCB7IENmbkFwaSwgQ2ZuQXBpUHJvcHMgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtYXBpZ2F0ZXdheXYyJztcbmltcG9ydCB7IElBcGkgfSBmcm9tICcuLi9jb21tb24vYXBpJztcbmltcG9ydCB7IEFwaUJhc2UgfSBmcm9tICcuLi9jb21tb24vYmFzZSc7XG5pbXBvcnQgeyBEb21haW5NYXBwaW5nT3B0aW9ucyB9IGZyb20gJy4uL2NvbW1vbi9zdGFnZSc7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhbiBIVFRQIEFQSVxuICovXG5leHBvcnQgaW50ZXJmYWNlIElIdHRwQXBpIGV4dGVuZHMgSUFwaSB7XG4gIC8qKlxuICAgKiBUaGUgaWRlbnRpZmllciBvZiB0aGlzIEFQSSBHYXRld2F5IEhUVFAgQVBJLlxuICAgKlxuICAgKiBAYXR0cmlidXRlXG4gICAqIEBkZXByZWNhdGVkIC0gdXNlIGFwaUlkIGluc3RlYWRcbiAgICovXG4gIHJlYWRvbmx5IGh0dHBBcGlJZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBEZWZhdWx0IEF1dGhvcml6ZXIgYXBwbGllZCB0byBhbGwgcm91dGVzIGluIHRoZSBnYXRld2F5LlxuICAgKlxuICAgKiBAYXR0cmlidXRlXG4gICAqIEBkZWZhdWx0IC0gbm8gZGVmYXVsdCBhdXRob3JpemVyXG4gICAqL1xuICByZWFkb25seSBkZWZhdWx0QXV0aG9yaXplcj86IElIdHRwUm91dGVBdXRob3JpemVyO1xuXG4gIC8qKlxuICAgKiBEZWZhdWx0IE9JREMgc2NvcGVzIGF0dGFjaGVkIHRvIGFsbCByb3V0ZXMgaW4gdGhlIGdhdGV3YXksIHVubGVzcyBleHBsaWNpdGx5IGNvbmZpZ3VyZWQgb24gdGhlIHJvdXRlLlxuICAgKiBUaGUgc2NvcGVzIGFyZSB1c2VkIHdpdGggYSBDT0dOSVRPX1VTRVJfUE9PTFMgYXV0aG9yaXplciB0byBhdXRob3JpemUgdGhlIG1ldGhvZCBpbnZvY2F0aW9uLlxuICAgKlxuICAgKiBAYXR0cmlidXRlXG4gICAqIEBkZWZhdWx0IC0gbm8gZGVmYXVsdCBhdXRob3JpemF0aW9uIHNjb3Blc1xuICAgKi9cbiAgcmVhZG9ubHkgZGVmYXVsdEF1dGhvcml6YXRpb25TY29wZXM/OiBzdHJpbmdbXTtcblxuICAvKipcbiAgICogTWV0cmljIGZvciB0aGUgbnVtYmVyIG9mIGNsaWVudC1zaWRlIGVycm9ycyBjYXB0dXJlZCBpbiBhIGdpdmVuIHBlcmlvZC5cbiAgICpcbiAgICogQGRlZmF1bHQgLSBzdW0gb3ZlciA1IG1pbnV0ZXNcbiAgICovXG4gIG1ldHJpY0NsaWVudEVycm9yKHByb3BzPzogTWV0cmljT3B0aW9ucyk6IE1ldHJpYztcblxuICAvKipcbiAgICogTWV0cmljIGZvciB0aGUgbnVtYmVyIG9mIHNlcnZlci1zaWRlIGVycm9ycyBjYXB0dXJlZCBpbiBhIGdpdmVuIHBlcmlvZC5cbiAgICpcbiAgICogQGRlZmF1bHQgLSBzdW0gb3ZlciA1IG1pbnV0ZXNcbiAgICovXG4gIG1ldHJpY1NlcnZlckVycm9yKHByb3BzPzogTWV0cmljT3B0aW9ucyk6IE1ldHJpYztcblxuICAvKipcbiAgICogTWV0cmljIGZvciB0aGUgYW1vdW50IG9mIGRhdGEgcHJvY2Vzc2VkIGluIGJ5dGVzLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIHN1bSBvdmVyIDUgbWludXRlc1xuICAgKi9cbiAgbWV0cmljRGF0YVByb2Nlc3NlZChwcm9wcz86IE1ldHJpY09wdGlvbnMpOiBNZXRyaWM7XG5cbiAgLyoqXG4gICAqIE1ldHJpYyBmb3IgdGhlIHRvdGFsIG51bWJlciBBUEkgcmVxdWVzdHMgaW4gYSBnaXZlbiBwZXJpb2QuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gU2FtcGxlQ291bnQgb3ZlciA1IG1pbnV0ZXNcbiAgICovXG4gIG1ldHJpY0NvdW50KHByb3BzPzogTWV0cmljT3B0aW9ucyk6IE1ldHJpYztcblxuICAvKipcbiAgICogTWV0cmljIGZvciB0aGUgdGltZSBiZXR3ZWVuIHdoZW4gQVBJIEdhdGV3YXkgcmVsYXlzIGEgcmVxdWVzdCB0byB0aGUgYmFja2VuZFxuICAgKiBhbmQgd2hlbiBpdCByZWNlaXZlcyBhIHJlc3BvbnNlIGZyb20gdGhlIGJhY2tlbmQuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gbm8gc3RhdGlzdGljXG4gICAqL1xuICBtZXRyaWNJbnRlZ3JhdGlvbkxhdGVuY3kocHJvcHM/OiBNZXRyaWNPcHRpb25zKTogTWV0cmljO1xuXG4gIC8qKlxuICAgKiBUaGUgdGltZSBiZXR3ZWVuIHdoZW4gQVBJIEdhdGV3YXkgcmVjZWl2ZXMgYSByZXF1ZXN0IGZyb20gYSBjbGllbnRcbiAgICogYW5kIHdoZW4gaXQgcmV0dXJucyBhIHJlc3BvbnNlIHRvIHRoZSBjbGllbnQuXG4gICAqIFRoZSBsYXRlbmN5IGluY2x1ZGVzIHRoZSBpbnRlZ3JhdGlvbiBsYXRlbmN5IGFuZCBvdGhlciBBUEkgR2F0ZXdheSBvdmVyaGVhZC5cbiAgICpcbiAgICogQGRlZmF1bHQgLSBubyBzdGF0aXN0aWNcbiAgICovXG4gIG1ldHJpY0xhdGVuY3kocHJvcHM/OiBNZXRyaWNPcHRpb25zKTogTWV0cmljO1xuXG4gIC8qKlxuICAgKiBBZGQgYSBuZXcgVnBjTGlua1xuICAgKi9cbiAgYWRkVnBjTGluayhvcHRpb25zOiBWcGNMaW5rUHJvcHMpOiBWcGNMaW5rXG59XG5cbi8qKlxuICogUHJvcGVydGllcyB0byBpbml0aWFsaXplIGFuIGluc3RhbmNlIG9mIGBIdHRwQXBpYC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBIdHRwQXBpUHJvcHMge1xuICAvKipcbiAgICogTmFtZSBmb3IgdGhlIEhUVFAgQVBJIHJlc291cmNlXG4gICAqIEBkZWZhdWx0IC0gaWQgb2YgdGhlIEh0dHBBcGkgY29uc3RydWN0LlxuICAgKi9cbiAgcmVhZG9ubHkgYXBpTmFtZT86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBBUEkuXG4gICAqIEBkZWZhdWx0IC0gbm9uZVxuICAgKi9cbiAgcmVhZG9ubHkgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEFuIGludGVncmF0aW9uIHRoYXQgd2lsbCBiZSBjb25maWd1cmVkIG9uIHRoZSBjYXRjaC1hbGwgcm91dGUgKCRkZWZhdWx0KS5cbiAgICogQGRlZmF1bHQgLSBub25lXG4gICAqL1xuICByZWFkb25seSBkZWZhdWx0SW50ZWdyYXRpb24/OiBIdHRwUm91dGVJbnRlZ3JhdGlvbjtcblxuICAvKipcbiAgICogV2hldGhlciBhIGRlZmF1bHQgc3RhZ2UgYW5kIGRlcGxveW1lbnQgc2hvdWxkIGJlIGF1dG9tYXRpY2FsbHkgY3JlYXRlZC5cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgcmVhZG9ubHkgY3JlYXRlRGVmYXVsdFN0YWdlPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogU3BlY2lmaWVzIGEgQ09SUyBjb25maWd1cmF0aW9uIGZvciBhbiBBUEkuXG4gICAqIEBzZWUgaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2FwaWdhdGV3YXkvbGF0ZXN0L2RldmVsb3Blcmd1aWRlL2h0dHAtYXBpLWNvcnMuaHRtbFxuICAgKiBAZGVmYXVsdCAtIENPUlMgZGlzYWJsZWQuXG4gICAqL1xuICByZWFkb25seSBjb3JzUHJlZmxpZ2h0PzogQ29yc1ByZWZsaWdodE9wdGlvbnM7XG5cbiAgLyoqXG4gICAqIENvbmZpZ3VyZSBhIGN1c3RvbSBkb21haW4gd2l0aCB0aGUgQVBJIG1hcHBpbmcgcmVzb3VyY2UgdG8gdGhlIEhUVFAgQVBJXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gbm8gZGVmYXVsdCBkb21haW4gbWFwcGluZyBjb25maWd1cmVkLiBtZWFuaW5nbGVzcyBpZiBgY3JlYXRlRGVmYXVsdFN0YWdlYCBpcyBgZmFsc2VgLlxuICAgKi9cbiAgcmVhZG9ubHkgZGVmYXVsdERvbWFpbk1hcHBpbmc/OiBEb21haW5NYXBwaW5nT3B0aW9ucztcblxuICAvKipcbiAgICogU3BlY2lmaWVzIHdoZXRoZXIgY2xpZW50cyBjYW4gaW52b2tlIHlvdXIgQVBJIHVzaW5nIHRoZSBkZWZhdWx0IGVuZHBvaW50LlxuICAgKiBCeSBkZWZhdWx0LCBjbGllbnRzIGNhbiBpbnZva2UgeW91ciBBUEkgd2l0aCB0aGUgZGVmYXVsdFxuICAgKiBgaHR0cHM6Ly97YXBpX2lkfS5leGVjdXRlLWFwaS57cmVnaW9ufS5hbWF6b25hd3MuY29tYCBlbmRwb2ludC4gRW5hYmxlXG4gICAqIHRoaXMgaWYgeW91IHdvdWxkIGxpa2UgY2xpZW50cyB0byB1c2UgeW91ciBjdXN0b20gZG9tYWluIG5hbWUuXG4gICAqIEBkZWZhdWx0IGZhbHNlIGV4ZWN1dGUtYXBpIGVuZHBvaW50IGVuYWJsZWQuXG4gICAqL1xuICByZWFkb25seSBkaXNhYmxlRXhlY3V0ZUFwaUVuZHBvaW50PzogYm9vbGVhbjtcblxuICAvKipcbiAgICogRGVmYXVsdCBBdXRob3JpemVyIGFwcGxpZWQgdG8gYWxsIHJvdXRlcyBpbiB0aGUgZ2F0ZXdheS5cbiAgICpcbiAgICogQGRlZmF1bHQgLSBubyBkZWZhdWx0IGF1dGhvcml6ZXJcbiAgICovXG4gIHJlYWRvbmx5IGRlZmF1bHRBdXRob3JpemVyPzogSUh0dHBSb3V0ZUF1dGhvcml6ZXI7XG5cbiAgLyoqXG4gICAqIERlZmF1bHQgT0lEQyBzY29wZXMgYXR0YWNoZWQgdG8gYWxsIHJvdXRlcyBpbiB0aGUgZ2F0ZXdheSwgdW5sZXNzIGV4cGxpY2l0bHkgY29uZmlndXJlZCBvbiB0aGUgcm91dGUuXG4gICAqIFRoZSBzY29wZXMgYXJlIHVzZWQgd2l0aCBhIENPR05JVE9fVVNFUl9QT09MUyBhdXRob3JpemVyIHRvIGF1dGhvcml6ZSB0aGUgbWV0aG9kIGludm9jYXRpb24uXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gbm8gZGVmYXVsdCBhdXRob3JpemF0aW9uIHNjb3Blc1xuICAgKi9cbiAgcmVhZG9ubHkgZGVmYXVsdEF1dGhvcml6YXRpb25TY29wZXM/OiBzdHJpbmdbXTtcbn1cblxuLyoqXG4gKiBTdXBwb3J0ZWQgQ09SUyBIVFRQIG1ldGhvZHNcbiAqL1xuZXhwb3J0IGVudW0gQ29yc0h0dHBNZXRob2R7XG4gIC8qKiBIVFRQIEFOWSAqL1xuICBBTlkgPSAnKicsXG4gIC8qKiBIVFRQIERFTEVURSAqL1xuICBERUxFVEUgPSAnREVMRVRFJyxcbiAgLyoqIEhUVFAgR0VUICovXG4gIEdFVCA9ICdHRVQnLFxuICAvKiogSFRUUCBIRUFEICovXG4gIEhFQUQgPSAnSEVBRCcsXG4gIC8qKiBIVFRQIE9QVElPTlMgKi9cbiAgT1BUSU9OUyA9ICdPUFRJT05TJyxcbiAgLyoqIEhUVFAgUEFUQ0ggKi9cbiAgUEFUQ0ggPSAnUEFUQ0gnLFxuICAvKiogSFRUUCBQT1NUICovXG4gIFBPU1QgPSAnUE9TVCcsXG4gIC8qKiBIVFRQIFBVVCAqL1xuICBQVVQgPSAnUFVUJyxcbn1cblxuLyoqXG4gKiBPcHRpb25zIGZvciB0aGUgQ09SUyBDb25maWd1cmF0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29yc1ByZWZsaWdodE9wdGlvbnMge1xuICAvKipcbiAgICogU3BlY2lmaWVzIHdoZXRoZXIgY3JlZGVudGlhbHMgYXJlIGluY2x1ZGVkIGluIHRoZSBDT1JTIHJlcXVlc3QuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICByZWFkb25seSBhbGxvd0NyZWRlbnRpYWxzPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogUmVwcmVzZW50cyBhIGNvbGxlY3Rpb24gb2YgYWxsb3dlZCBoZWFkZXJzLlxuICAgKiBAZGVmYXVsdCAtIE5vIEhlYWRlcnMgYXJlIGFsbG93ZWQuXG4gICAqL1xuICByZWFkb25seSBhbGxvd0hlYWRlcnM/OiBzdHJpbmdbXTtcblxuICAvKipcbiAgICogUmVwcmVzZW50cyBhIGNvbGxlY3Rpb24gb2YgYWxsb3dlZCBIVFRQIG1ldGhvZHMuXG4gICAqIEBkZWZhdWx0IC0gTm8gTWV0aG9kcyBhcmUgYWxsb3dlZC5cbiAgICovXG4gIHJlYWRvbmx5IGFsbG93TWV0aG9kcz86IENvcnNIdHRwTWV0aG9kW107XG5cbiAgLyoqXG4gICAqIFJlcHJlc2VudHMgYSBjb2xsZWN0aW9uIG9mIGFsbG93ZWQgb3JpZ2lucy5cbiAgICogQGRlZmF1bHQgLSBObyBPcmlnaW5zIGFyZSBhbGxvd2VkLlxuICAgKi9cbiAgcmVhZG9ubHkgYWxsb3dPcmlnaW5zPzogc3RyaW5nW107XG5cbiAgLyoqXG4gICAqIFJlcHJlc2VudHMgYSBjb2xsZWN0aW9uIG9mIGV4cG9zZWQgaGVhZGVycy5cbiAgICogQGRlZmF1bHQgLSBObyBFeHBvc2UgSGVhZGVycyBhcmUgYWxsb3dlZC5cbiAgICovXG4gIHJlYWRvbmx5IGV4cG9zZUhlYWRlcnM/OiBzdHJpbmdbXTtcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIHRoYXQgdGhlIGJyb3dzZXIgc2hvdWxkIGNhY2hlIHByZWZsaWdodCByZXF1ZXN0IHJlc3VsdHMuXG4gICAqIEBkZWZhdWx0IER1cmF0aW9uLnNlY29uZHMoMClcbiAgICovXG4gIHJlYWRvbmx5IG1heEFnZT86IER1cmF0aW9uO1xufVxuXG4vKipcbiAqIE9wdGlvbnMgZm9yIHRoZSBSb3V0ZSB3aXRoIEludGVncmF0aW9uIHJlc291cmNlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQWRkUm91dGVzT3B0aW9ucyBleHRlbmRzIEJhdGNoSHR0cFJvdXRlT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBUaGUgcGF0aCBhdCB3aGljaCBhbGwgb2YgdGhlc2Ugcm91dGVzIGFyZSBjb25maWd1cmVkLlxuICAgKi9cbiAgcmVhZG9ubHkgcGF0aDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgSFRUUCBtZXRob2RzIHRvIGJlIGNvbmZpZ3VyZWRcbiAgICogQGRlZmF1bHQgSHR0cE1ldGhvZC5BTllcbiAgICovXG4gIHJlYWRvbmx5IG1ldGhvZHM/OiBIdHRwTWV0aG9kW107XG5cbiAgLyoqXG4gICAqIEF1dGhvcml6ZXIgdG8gYmUgYXNzb2NpYXRlZCB0byB0aGVzZSByb3V0ZXMuXG4gICAqXG4gICAqIFVzZSBOb25lQXV0aG9yaXplciB0byByZW1vdmUgdGhlIGRlZmF1bHQgYXV0aG9yaXplciBmb3IgdGhlIGFwaVxuICAgKlxuICAgKiBAZGVmYXVsdCAtIHVzZXMgdGhlIGRlZmF1bHQgYXV0aG9yaXplciBpZiBvbmUgaXMgc3BlY2lmaWVkIG9uIHRoZSBIdHRwQXBpXG4gICAqL1xuICByZWFkb25seSBhdXRob3JpemVyPzogSUh0dHBSb3V0ZUF1dGhvcml6ZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBsaXN0IG9mIE9JREMgc2NvcGVzIHRvIGluY2x1ZGUgaW4gdGhlIGF1dGhvcml6YXRpb24uXG4gICAqXG4gICAqIFRoZXNlIHNjb3BlcyB3aWxsIG92ZXJyaWRlIHRoZSBkZWZhdWx0IGF1dGhvcml6YXRpb24gc2NvcGVzIG9uIHRoZSBnYXRld2F5LlxuICAgKiBTZXQgdG8gW10gdG8gcmVtb3ZlIGRlZmF1bHQgc2NvcGVzXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gdXNlcyBkZWZhdWx0QXV0aG9yaXphdGlvblNjb3BlcyBpZiBjb25maWd1cmVkIG9uIHRoZSBBUEksIG90aGVyd2lzZSBub25lLlxuICAgKi9cbiAgcmVhZG9ubHkgYXV0aG9yaXphdGlvblNjb3Blcz86IHN0cmluZ1tdO1xufVxuXG5hYnN0cmFjdCBjbGFzcyBIdHRwQXBpQmFzZSBleHRlbmRzIEFwaUJhc2UgaW1wbGVtZW50cyBJSHR0cEFwaSB7IC8vIG5vdGUgdGhhdCB0aGlzIGlzIG5vdCBleHBvcnRlZFxuXG4gIHB1YmxpYyBhYnN0cmFjdCBvdmVycmlkZSByZWFkb25seSBhcGlJZDogc3RyaW5nO1xuICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkgaHR0cEFwaUlkOiBzdHJpbmc7XG4gIHB1YmxpYyBhYnN0cmFjdCBvdmVycmlkZSByZWFkb25seSBhcGlFbmRwb2ludDogc3RyaW5nO1xuICBwcml2YXRlIHZwY0xpbmtzOiBSZWNvcmQ8c3RyaW5nLCBWcGNMaW5rPiA9IHt9O1xuXG4gIHB1YmxpYyBtZXRyaWNDbGllbnRFcnJvcihwcm9wcz86IE1ldHJpY09wdGlvbnMpOiBNZXRyaWMge1xuICAgIHJldHVybiB0aGlzLm1ldHJpYygnNHh4JywgeyBzdGF0aXN0aWM6ICdTdW0nLCAuLi5wcm9wcyB9KTtcbiAgfVxuXG4gIHB1YmxpYyBtZXRyaWNTZXJ2ZXJFcnJvcihwcm9wcz86IE1ldHJpY09wdGlvbnMpOiBNZXRyaWMge1xuICAgIHJldHVybiB0aGlzLm1ldHJpYygnNXh4JywgeyBzdGF0aXN0aWM6ICdTdW0nLCAuLi5wcm9wcyB9KTtcbiAgfVxuXG4gIHB1YmxpYyBtZXRyaWNEYXRhUHJvY2Vzc2VkKHByb3BzPzogTWV0cmljT3B0aW9ucyk6IE1ldHJpYyB7XG4gICAgcmV0dXJuIHRoaXMubWV0cmljKCdEYXRhUHJvY2Vzc2VkJywgeyBzdGF0aXN0aWM6ICdTdW0nLCAuLi5wcm9wcyB9KTtcbiAgfVxuXG4gIHB1YmxpYyBtZXRyaWNDb3VudChwcm9wcz86IE1ldHJpY09wdGlvbnMpOiBNZXRyaWMge1xuICAgIHJldHVybiB0aGlzLm1ldHJpYygnQ291bnQnLCB7IHN0YXRpc3RpYzogJ1NhbXBsZUNvdW50JywgLi4ucHJvcHMgfSk7XG4gIH1cblxuICBwdWJsaWMgbWV0cmljSW50ZWdyYXRpb25MYXRlbmN5KHByb3BzPzogTWV0cmljT3B0aW9ucyk6IE1ldHJpYyB7XG4gICAgcmV0dXJuIHRoaXMubWV0cmljKCdJbnRlZ3JhdGlvbkxhdGVuY3knLCBwcm9wcyk7XG4gIH1cblxuICBwdWJsaWMgbWV0cmljTGF0ZW5jeShwcm9wcz86IE1ldHJpY09wdGlvbnMpOiBNZXRyaWMge1xuICAgIHJldHVybiB0aGlzLm1ldHJpYygnTGF0ZW5jeScsIHByb3BzKTtcbiAgfVxuXG4gIHB1YmxpYyBhZGRWcGNMaW5rKG9wdGlvbnM6IFZwY0xpbmtQcm9wcyk6IFZwY0xpbmsge1xuICAgIGNvbnN0IHsgdnBjSWQgfSA9IG9wdGlvbnMudnBjO1xuICAgIGlmICh2cGNJZCBpbiB0aGlzLnZwY0xpbmtzKSB7XG4gICAgICByZXR1cm4gdGhpcy52cGNMaW5rc1t2cGNJZF07XG4gICAgfVxuXG4gICAgY29uc3QgY291bnQgPSBPYmplY3Qua2V5cyh0aGlzLnZwY0xpbmtzKS5sZW5ndGggKyAxO1xuICAgIGNvbnN0IHZwY0xpbmsgPSBuZXcgVnBjTGluayh0aGlzLCBgVnBjTGluay0ke2NvdW50fWAsIG9wdGlvbnMpO1xuICAgIHRoaXMudnBjTGlua3NbdnBjSWRdID0gdnBjTGluaztcblxuICAgIHJldHVybiB2cGNMaW5rO1xuICB9XG59XG5cbi8qKlxuICogQXR0cmlidXRlcyBmb3IgaW1wb3J0aW5nIGFuIEh0dHBBcGkgaW50byB0aGUgQ0RLXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSHR0cEFwaUF0dHJpYnV0ZXMge1xuICAvKipcbiAgICogVGhlIGlkZW50aWZpZXIgb2YgdGhlIEh0dHBBcGlcbiAgICovXG4gIHJlYWRvbmx5IGh0dHBBcGlJZDogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGVuZHBvaW50IFVSTCBvZiB0aGUgSHR0cEFwaVxuICAgKiBAZGVmYXVsdCAtIHRocm93cyBhbiBlcnJvciBpZiBhcGlFbmRwb2ludCBpcyBhY2Nlc3NlZC5cbiAgICovXG4gIHJlYWRvbmx5IGFwaUVuZHBvaW50Pzogc3RyaW5nO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBBUEkgR2F0ZXdheSBIVFRQIEFQSSBlbmRwb2ludC5cbiAqIEByZXNvdXJjZSBBV1M6OkFwaUdhdGV3YXlWMjo6QXBpXG4gKi9cbmV4cG9ydCBjbGFzcyBIdHRwQXBpIGV4dGVuZHMgSHR0cEFwaUJhc2Uge1xuICAvKipcbiAgICogSW1wb3J0IGFuIGV4aXN0aW5nIEhUVFAgQVBJIGludG8gdGhpcyBDREsgYXBwLlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBmcm9tSHR0cEFwaUF0dHJpYnV0ZXMoc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgYXR0cnM6IEh0dHBBcGlBdHRyaWJ1dGVzKTogSUh0dHBBcGkge1xuICAgIGNsYXNzIEltcG9ydCBleHRlbmRzIEh0dHBBcGlCYXNlIHtcbiAgICAgIHB1YmxpYyByZWFkb25seSBhcGlJZCA9IGF0dHJzLmh0dHBBcGlJZDtcbiAgICAgIHB1YmxpYyByZWFkb25seSBodHRwQXBpSWQgPSBhdHRycy5odHRwQXBpSWQ7XG4gICAgICBwcml2YXRlIHJlYWRvbmx5IF9hcGlFbmRwb2ludCA9IGF0dHJzLmFwaUVuZHBvaW50O1xuXG4gICAgICBwdWJsaWMgZ2V0IGFwaUVuZHBvaW50KCk6IHN0cmluZyB7XG4gICAgICAgIGlmICghdGhpcy5fYXBpRW5kcG9pbnQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FwaUVuZHBvaW50IGlzIG5vdCBjb25maWd1cmVkIG9uIHRoZSBpbXBvcnRlZCBIdHRwQXBpLicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9hcGlFbmRwb2ludDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ldyBJbXBvcnQoc2NvcGUsIGlkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIGh1bWFuIGZyaWVuZGx5IG5hbWUgZm9yIHRoaXMgSFRUUCBBUEkuIE5vdGUgdGhhdCB0aGlzIGlzIGRpZmZlcmVudCBmcm9tIGBodHRwQXBpSWRgLlxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IGh0dHBBcGlOYW1lPzogc3RyaW5nO1xuICBwdWJsaWMgcmVhZG9ubHkgYXBpSWQ6IHN0cmluZztcbiAgcHVibGljIHJlYWRvbmx5IGh0dHBBcGlJZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgd2hldGhlciBjbGllbnRzIGNhbiBpbnZva2UgdGhpcyBIVFRQIEFQSSBieSB1c2luZyB0aGUgZGVmYXVsdCBleGVjdXRlLWFwaSBlbmRwb2ludC5cbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBkaXNhYmxlRXhlY3V0ZUFwaUVuZHBvaW50PzogYm9vbGVhbjtcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgc3RhZ2Ugb2YgdGhpcyBBUElcbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBkZWZhdWx0U3RhZ2U6IElIdHRwU3RhZ2UgfCB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIERlZmF1bHQgQXV0aG9yaXplciBhcHBsaWVkIHRvIGFsbCByb3V0ZXMgaW4gdGhlIGdhdGV3YXkuXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgZGVmYXVsdEF1dGhvcml6ZXI/OiBJSHR0cFJvdXRlQXV0aG9yaXplcjtcblxuICAvKipcbiAgICogRGVmYXVsdCBPSURDIHNjb3BlcyBhdHRhY2hlZCB0byBhbGwgcm91dGVzIGluIHRoZSBnYXRld2F5LCB1bmxlc3MgZXhwbGljaXRseSBjb25maWd1cmVkIG9uIHRoZSByb3V0ZS5cbiAgICogVGhlIHNjb3BlcyBhcmUgdXNlZCB3aXRoIGEgQ09HTklUT19VU0VSX1BPT0xTIGF1dGhvcml6ZXIgdG8gYXV0aG9yaXplIHRoZSBtZXRob2QgaW52b2NhdGlvbi5cbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBkZWZhdWx0QXV0aG9yaXphdGlvblNjb3Blcz86IHN0cmluZ1tdO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgX2FwaUVuZHBvaW50OiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM/OiBIdHRwQXBpUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgdGhpcy5odHRwQXBpTmFtZSA9IHByb3BzPy5hcGlOYW1lID8/IGlkO1xuICAgIHRoaXMuZGlzYWJsZUV4ZWN1dGVBcGlFbmRwb2ludCA9IHByb3BzPy5kaXNhYmxlRXhlY3V0ZUFwaUVuZHBvaW50O1xuXG4gICAgbGV0IGNvcnNDb25maWd1cmF0aW9uOiBDZm5BcGkuQ29yc1Byb3BlcnR5IHwgdW5kZWZpbmVkO1xuICAgIGlmIChwcm9wcz8uY29yc1ByZWZsaWdodCkge1xuICAgICAgY29uc3QgY29ycyA9IHByb3BzLmNvcnNQcmVmbGlnaHQ7XG4gICAgICBpZiAoY29ycy5hbGxvd09yaWdpbnMgJiYgY29ycy5hbGxvd09yaWdpbnMuaW5jbHVkZXMoJyonKSAmJiBjb3JzLmFsbG93Q3JlZGVudGlhbHMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ09SUyBwcmVmbGlnaHQgLSBhbGxvd0NyZWRlbnRpYWxzIGlzIG5vdCBzdXBwb3J0ZWQgd2hlbiBhbGxvd09yaWdpbiBpcyAnKidcIik7XG4gICAgICB9XG4gICAgICBjb25zdCB7XG4gICAgICAgIGFsbG93Q3JlZGVudGlhbHMsXG4gICAgICAgIGFsbG93SGVhZGVycyxcbiAgICAgICAgYWxsb3dNZXRob2RzLFxuICAgICAgICBhbGxvd09yaWdpbnMsXG4gICAgICAgIGV4cG9zZUhlYWRlcnMsXG4gICAgICAgIG1heEFnZSxcbiAgICAgIH0gPSBwcm9wcy5jb3JzUHJlZmxpZ2h0O1xuICAgICAgY29yc0NvbmZpZ3VyYXRpb24gPSB7XG4gICAgICAgIGFsbG93Q3JlZGVudGlhbHMsXG4gICAgICAgIGFsbG93SGVhZGVycyxcbiAgICAgICAgYWxsb3dNZXRob2RzLFxuICAgICAgICBhbGxvd09yaWdpbnMsXG4gICAgICAgIGV4cG9zZUhlYWRlcnMsXG4gICAgICAgIG1heEFnZTogbWF4QWdlPy50b1NlY29uZHMoKSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY29uc3QgYXBpUHJvcHM6IENmbkFwaVByb3BzID0ge1xuICAgICAgbmFtZTogdGhpcy5odHRwQXBpTmFtZSxcbiAgICAgIHByb3RvY29sVHlwZTogJ0hUVFAnLFxuICAgICAgY29yc0NvbmZpZ3VyYXRpb24sXG4gICAgICBkZXNjcmlwdGlvbjogcHJvcHM/LmRlc2NyaXB0aW9uLFxuICAgICAgZGlzYWJsZUV4ZWN1dGVBcGlFbmRwb2ludDogdGhpcy5kaXNhYmxlRXhlY3V0ZUFwaUVuZHBvaW50LFxuICAgIH07XG5cbiAgICBjb25zdCByZXNvdXJjZSA9IG5ldyBDZm5BcGkodGhpcywgJ1Jlc291cmNlJywgYXBpUHJvcHMpO1xuICAgIHRoaXMuYXBpSWQgPSByZXNvdXJjZS5yZWY7XG4gICAgdGhpcy5odHRwQXBpSWQgPSByZXNvdXJjZS5yZWY7XG4gICAgdGhpcy5fYXBpRW5kcG9pbnQgPSByZXNvdXJjZS5hdHRyQXBpRW5kcG9pbnQ7XG4gICAgdGhpcy5kZWZhdWx0QXV0aG9yaXplciA9IHByb3BzPy5kZWZhdWx0QXV0aG9yaXplcjtcbiAgICB0aGlzLmRlZmF1bHRBdXRob3JpemF0aW9uU2NvcGVzID0gcHJvcHM/LmRlZmF1bHRBdXRob3JpemF0aW9uU2NvcGVzO1xuXG4gICAgaWYgKHByb3BzPy5kZWZhdWx0SW50ZWdyYXRpb24pIHtcbiAgICAgIG5ldyBIdHRwUm91dGUodGhpcywgJ0RlZmF1bHRSb3V0ZScsIHtcbiAgICAgICAgaHR0cEFwaTogdGhpcyxcbiAgICAgICAgcm91dGVLZXk6IEh0dHBSb3V0ZUtleS5ERUZBVUxULFxuICAgICAgICBpbnRlZ3JhdGlvbjogcHJvcHMuZGVmYXVsdEludGVncmF0aW9uLFxuICAgICAgICBhdXRob3JpemVyOiBwcm9wcy5kZWZhdWx0QXV0aG9yaXplcixcbiAgICAgICAgYXV0aG9yaXphdGlvblNjb3BlczogcHJvcHMuZGVmYXVsdEF1dGhvcml6YXRpb25TY29wZXMsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAocHJvcHM/LmNyZWF0ZURlZmF1bHRTdGFnZSA9PT0gdW5kZWZpbmVkIHx8IHByb3BzLmNyZWF0ZURlZmF1bHRTdGFnZSA9PT0gdHJ1ZSkge1xuICAgICAgdGhpcy5kZWZhdWx0U3RhZ2UgPSBuZXcgSHR0cFN0YWdlKHRoaXMsICdEZWZhdWx0U3RhZ2UnLCB7XG4gICAgICAgIGh0dHBBcGk6IHRoaXMsXG4gICAgICAgIGF1dG9EZXBsb3k6IHRydWUsXG4gICAgICAgIGRvbWFpbk1hcHBpbmc6IHByb3BzPy5kZWZhdWx0RG9tYWluTWFwcGluZyxcbiAgICAgIH0pO1xuXG4gICAgICAvLyB0byBlbnN1cmUgdGhlIGRvbWFpbiBpcyByZWFkeSBiZWZvcmUgY3JlYXRpbmcgdGhlIGRlZmF1bHQgc3RhZ2VcbiAgICAgIGlmIChwcm9wcz8uZGVmYXVsdERvbWFpbk1hcHBpbmcpIHtcbiAgICAgICAgdGhpcy5kZWZhdWx0U3RhZ2Uubm9kZS5hZGREZXBlbmRlbmN5KHByb3BzLmRlZmF1bHREb21haW5NYXBwaW5nLmRvbWFpbk5hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwcm9wcz8uY3JlYXRlRGVmYXVsdFN0YWdlID09PSBmYWxzZSAmJiBwcm9wcy5kZWZhdWx0RG9tYWluTWFwcGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdkZWZhdWx0RG9tYWluTWFwcGluZyBub3Qgc3VwcG9ydGVkIHdpdGggY3JlYXRlRGVmYXVsdFN0YWdlIGRpc2FibGVkJyxcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgZGVmYXVsdCBlbmRwb2ludCBmb3IgdGhpcyBBUEkuXG4gICAqL1xuICBwdWJsaWMgZ2V0IGFwaUVuZHBvaW50KCk6IHN0cmluZyB7XG4gICAgaWYgKHRoaXMuZGlzYWJsZUV4ZWN1dGVBcGlFbmRwb2ludCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdhcGlFbmRwb2ludCBpcyBub3QgYWNjZXNzaWJsZSB3aGVuIGRpc2FibGVFeGVjdXRlQXBpRW5kcG9pbnQgaXMgc2V0IHRvIHRydWUuJyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9hcGlFbmRwb2ludDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIFVSTCB0byB0aGUgZGVmYXVsdCBzdGFnZSBvZiB0aGlzIEFQSS5cbiAgICogUmV0dXJucyBgdW5kZWZpbmVkYCBpZiBgY3JlYXRlRGVmYXVsdFN0YWdlYCBpcyB1bnNldC5cbiAgICovXG4gIHB1YmxpYyBnZXQgdXJsKCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuZGVmYXVsdFN0YWdlID8gdGhpcy5kZWZhdWx0U3RhZ2UudXJsIDogdW5kZWZpbmVkO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIG5ldyBzdGFnZS5cbiAgICovXG4gIHB1YmxpYyBhZGRTdGFnZShpZDogc3RyaW5nLCBvcHRpb25zOiBIdHRwU3RhZ2VPcHRpb25zKTogSHR0cFN0YWdlIHtcbiAgICBjb25zdCBzdGFnZSA9IG5ldyBIdHRwU3RhZ2UodGhpcywgaWQsIHtcbiAgICAgIGh0dHBBcGk6IHRoaXMsXG4gICAgICAuLi5vcHRpb25zLFxuICAgIH0pO1xuICAgIHJldHVybiBzdGFnZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgbXVsdGlwbGUgcm91dGVzIHRoYXQgdXNlcyB0aGUgc2FtZSBjb25maWd1cmF0aW9uLiBUaGUgcm91dGVzIGFsbCBnbyB0byB0aGUgc2FtZSBwYXRoLCBidXQgZm9yIGRpZmZlcmVudFxuICAgKiBtZXRob2RzLlxuICAgKi9cbiAgcHVibGljIGFkZFJvdXRlcyhvcHRpb25zOiBBZGRSb3V0ZXNPcHRpb25zKTogSHR0cFJvdXRlW10ge1xuICAgIGNvbnN0IG1ldGhvZHMgPSBvcHRpb25zLm1ldGhvZHMgPz8gW0h0dHBNZXRob2QuQU5ZXTtcbiAgICByZXR1cm4gbWV0aG9kcy5tYXAoKG1ldGhvZCkgPT4ge1xuICAgICAgY29uc3QgYXV0aG9yaXphdGlvblNjb3BlcyA9IG9wdGlvbnMuYXV0aG9yaXphdGlvblNjb3BlcyA/PyB0aGlzLmRlZmF1bHRBdXRob3JpemF0aW9uU2NvcGVzO1xuXG4gICAgICByZXR1cm4gbmV3IEh0dHBSb3V0ZSh0aGlzLCBgJHttZXRob2R9JHtvcHRpb25zLnBhdGh9YCwge1xuICAgICAgICBodHRwQXBpOiB0aGlzLFxuICAgICAgICByb3V0ZUtleTogSHR0cFJvdXRlS2V5LndpdGgob3B0aW9ucy5wYXRoLCBtZXRob2QpLFxuICAgICAgICBpbnRlZ3JhdGlvbjogb3B0aW9ucy5pbnRlZ3JhdGlvbixcbiAgICAgICAgYXV0aG9yaXplcjogb3B0aW9ucy5hdXRob3JpemVyID8/IHRoaXMuZGVmYXVsdEF1dGhvcml6ZXIsXG4gICAgICAgIGF1dGhvcml6YXRpb25TY29wZXMsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuIl19