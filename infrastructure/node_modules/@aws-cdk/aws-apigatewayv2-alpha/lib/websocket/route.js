"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebSocketRoute = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const core_1 = require("aws-cdk-lib/core");
const constructs_1 = require("constructs");
const authorizer_1 = require("./authorizer");
const aws_apigatewayv2_1 = require("aws-cdk-lib/aws-apigatewayv2");
/**
 * Route class that creates the Route for API Gateway WebSocket API
 * @resource AWS::ApiGatewayV2::Route
 */
class WebSocketRoute extends core_1.Resource {
    constructor(scope, id, props) {
        super(scope, id);
        try {
            jsiiDeprecationWarnings.print("@aws-cdk/aws-apigatewayv2-alpha.WebSocketRoute", "");
            jsiiDeprecationWarnings._aws_cdk_aws_apigatewayv2_alpha_WebSocketRouteProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, WebSocketRoute);
            }
            throw error;
        }
        if (props.routeKey != '$connect' && props.authorizer) {
            throw new Error('You can only set a WebSocket authorizer to a $connect route.');
        }
        this.webSocketApi = props.webSocketApi;
        this.routeKey = props.routeKey;
        const config = props.integration._bindToRoute({
            route: this,
            scope: this,
        });
        const authorizer = props.authorizer ?? new authorizer_1.WebSocketNoneAuthorizer(); // must be explicitly NONE (not undefined) for stack updates to work correctly
        const authBindResult = authorizer.bind({
            route: this,
            scope: this.webSocketApi instanceof constructs_1.Construct ? this.webSocketApi : this, // scope under the API if it's not imported
        });
        const route = new aws_apigatewayv2_1.CfnRoute(this, 'Resource', {
            apiId: props.webSocketApi.apiId,
            apiKeyRequired: props.apiKeyRequired,
            routeKey: props.routeKey,
            target: `integrations/${config.integrationId}`,
            authorizerId: authBindResult.authorizerId,
            authorizationType: authBindResult.authorizationType,
            routeResponseSelectionExpression: props.returnResponse ? '$default' : undefined,
        });
        this.routeId = route.ref;
        if (props.returnResponse) {
            new aws_apigatewayv2_1.CfnRouteResponse(this, 'Response', {
                apiId: props.webSocketApi.apiId,
                routeId: route.ref,
                routeResponseKey: '$default',
            });
        }
    }
}
exports.WebSocketRoute = WebSocketRoute;
_a = JSII_RTTI_SYMBOL_1;
WebSocketRoute[_a] = { fqn: "@aws-cdk/aws-apigatewayv2-alpha.WebSocketRoute", version: "2.114.1-alpha.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyb3V0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSwyQ0FBNEM7QUFDNUMsMkNBQXVDO0FBRXZDLDZDQUFrRjtBQUVsRixtRUFBMEU7QUFnRTFFOzs7R0FHRztBQUNILE1BQWEsY0FBZSxTQUFRLGVBQVE7SUFVMUMsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUEwQjtRQUNsRSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDOzs7Ozs7OytDQVhSLGNBQWM7Ozs7UUFhdkIsSUFBSSxLQUFLLENBQUMsUUFBUSxJQUFJLFVBQVUsSUFBSSxLQUFLLENBQUMsVUFBVSxFQUFFO1lBQ3BELE1BQU0sSUFBSSxLQUFLLENBQUMsOERBQThELENBQUMsQ0FBQztTQUNqRjtRQUVELElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQztRQUN2QyxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUM7UUFFL0IsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUM7WUFDNUMsS0FBSyxFQUFFLElBQUk7WUFDWCxLQUFLLEVBQUUsSUFBSTtTQUNaLENBQUMsQ0FBQztRQUVILE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxVQUFVLElBQUksSUFBSSxvQ0FBdUIsRUFBRSxDQUFDLENBQUMsOEVBQThFO1FBQ3BKLE1BQU0sY0FBYyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUM7WUFDckMsS0FBSyxFQUFFLElBQUk7WUFDWCxLQUFLLEVBQUUsSUFBSSxDQUFDLFlBQVksWUFBWSxzQkFBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsMkNBQTJDO1NBQ3RILENBQUMsQ0FBQztRQUVILE1BQU0sS0FBSyxHQUFHLElBQUksMkJBQVEsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFO1lBQzNDLEtBQUssRUFBRSxLQUFLLENBQUMsWUFBWSxDQUFDLEtBQUs7WUFDL0IsY0FBYyxFQUFFLEtBQUssQ0FBQyxjQUFjO1lBQ3BDLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtZQUN4QixNQUFNLEVBQUUsZ0JBQWdCLE1BQU0sQ0FBQyxhQUFhLEVBQUU7WUFDOUMsWUFBWSxFQUFFLGNBQWMsQ0FBQyxZQUFZO1lBQ3pDLGlCQUFpQixFQUFFLGNBQWMsQ0FBQyxpQkFBaUI7WUFDbkQsZ0NBQWdDLEVBQUUsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxTQUFTO1NBQ2hGLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQztRQUN6QixJQUFJLEtBQUssQ0FBQyxjQUFjLEVBQUU7WUFDeEIsSUFBSSxtQ0FBZ0IsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFO2dCQUNyQyxLQUFLLEVBQUUsS0FBSyxDQUFDLFlBQVksQ0FBQyxLQUFLO2dCQUMvQixPQUFPLEVBQUUsS0FBSyxDQUFDLEdBQUc7Z0JBQ2xCLGdCQUFnQixFQUFFLFVBQVU7YUFDN0IsQ0FBQyxDQUFDO1NBQ0o7S0FDRjs7QUFoREgsd0NBaURDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVzb3VyY2UgfSBmcm9tICdhd3MtY2RrLWxpYi9jb3JlJztcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHsgSVdlYlNvY2tldEFwaSB9IGZyb20gJy4vYXBpJztcbmltcG9ydCB7IElXZWJTb2NrZXRSb3V0ZUF1dGhvcml6ZXIsIFdlYlNvY2tldE5vbmVBdXRob3JpemVyIH0gZnJvbSAnLi9hdXRob3JpemVyJztcbmltcG9ydCB7IFdlYlNvY2tldFJvdXRlSW50ZWdyYXRpb24gfSBmcm9tICcuL2ludGVncmF0aW9uJztcbmltcG9ydCB7IENmblJvdXRlLCBDZm5Sb3V0ZVJlc3BvbnNlIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWFwaWdhdGV3YXl2Mic7XG5pbXBvcnQgeyBJUm91dGUgfSBmcm9tICcuLi9jb21tb24nO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBSb3V0ZSBmb3IgYW4gV2ViU29ja2V0IEFQSS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJV2ViU29ja2V0Um91dGUgZXh0ZW5kcyBJUm91dGUge1xuICAvKipcbiAgICogVGhlIFdlYlNvY2tldCBBUEkgYXNzb2NpYXRlZCB3aXRoIHRoaXMgcm91dGUuXG4gICAqL1xuICByZWFkb25seSB3ZWJTb2NrZXRBcGk6IElXZWJTb2NrZXRBcGk7XG5cbiAgLyoqXG4gICAqIFRoZSBrZXkgdG8gdGhpcyByb3V0ZS5cbiAgICogQGF0dHJpYnV0ZVxuICAgKi9cbiAgcmVhZG9ubHkgcm91dGVLZXk6IHN0cmluZztcbn1cblxuLyoqXG4gKiBPcHRpb25zIHVzZWQgdG8gYWRkIHJvdXRlIHRvIHRoZSBBUElcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBXZWJTb2NrZXRSb3V0ZU9wdGlvbnMge1xuICAvKipcbiAgICogVGhlIGludGVncmF0aW9uIHRvIGJlIGNvbmZpZ3VyZWQgb24gdGhpcyByb3V0ZS5cbiAgICovXG4gIHJlYWRvbmx5IGludGVncmF0aW9uOiBXZWJTb2NrZXRSb3V0ZUludGVncmF0aW9uO1xuXG4gIC8qKlxuICAgKiBUaGUgYXV0aG9yaXplIHRvIHRoaXMgcm91dGUuIFlvdSBjYW4gb25seSBzZXQgYXV0aG9yaXplciB0byBhICRjb25uZWN0IHJvdXRlLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIE5vIEF1dGhvcml6ZXJcbiAgICovXG4gIHJlYWRvbmx5IGF1dGhvcml6ZXI/OiBJV2ViU29ja2V0Um91dGVBdXRob3JpemVyO1xuXG4gIC8qKlxuICAgKiBTaG91bGQgdGhlIHJvdXRlIHNlbmQgYSByZXNwb25zZSB0byB0aGUgY2xpZW50XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICByZWFkb25seSByZXR1cm5SZXNwb25zZT86IGJvb2xlYW47XG5cbn1cblxuLyoqXG4gKiBQcm9wZXJ0aWVzIHRvIGluaXRpYWxpemUgYSBuZXcgUm91dGVcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBXZWJTb2NrZXRSb3V0ZVByb3BzIGV4dGVuZHMgV2ViU29ja2V0Um91dGVPcHRpb25zIHtcbiAgLyoqXG4gICAqIFRoZSBBUEkgdGhlIHJvdXRlIGlzIGFzc29jaWF0ZWQgd2l0aC5cbiAgICovXG4gIHJlYWRvbmx5IHdlYlNvY2tldEFwaTogSVdlYlNvY2tldEFwaTtcblxuICAvKipcbiAgICogVGhlIGtleSB0byB0aGlzIHJvdXRlLlxuICAgKi9cbiAgcmVhZG9ubHkgcm91dGVLZXk6IHN0cmluZztcblxuICAvKipcbiAgICogV2hldGhlciB0aGUgcm91dGUgcmVxdWlyZXMgYW4gQVBJIEtleSB0byBiZSBwcm92aWRlZFxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgcmVhZG9ubHkgYXBpS2V5UmVxdWlyZWQ/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIFJvdXRlIGNsYXNzIHRoYXQgY3JlYXRlcyB0aGUgUm91dGUgZm9yIEFQSSBHYXRld2F5IFdlYlNvY2tldCBBUElcbiAqIEByZXNvdXJjZSBBV1M6OkFwaUdhdGV3YXlWMjo6Um91dGVcbiAqL1xuZXhwb3J0IGNsYXNzIFdlYlNvY2tldFJvdXRlIGV4dGVuZHMgUmVzb3VyY2UgaW1wbGVtZW50cyBJV2ViU29ja2V0Um91dGUge1xuICBwdWJsaWMgcmVhZG9ubHkgcm91dGVJZDogc3RyaW5nO1xuICBwdWJsaWMgcmVhZG9ubHkgd2ViU29ja2V0QXBpOiBJV2ViU29ja2V0QXBpO1xuICBwdWJsaWMgcmVhZG9ubHkgcm91dGVLZXk6IHN0cmluZztcblxuICAvKipcbiAgICogSW50ZWdyYXRpb24gcmVzcG9uc2UgSURcbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBpbnRlZ3JhdGlvblJlc3BvbnNlSWQ/OiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFdlYlNvY2tldFJvdXRlUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgaWYgKHByb3BzLnJvdXRlS2V5ICE9ICckY29ubmVjdCcgJiYgcHJvcHMuYXV0aG9yaXplcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgY2FuIG9ubHkgc2V0IGEgV2ViU29ja2V0IGF1dGhvcml6ZXIgdG8gYSAkY29ubmVjdCByb3V0ZS4nKTtcbiAgICB9XG5cbiAgICB0aGlzLndlYlNvY2tldEFwaSA9IHByb3BzLndlYlNvY2tldEFwaTtcbiAgICB0aGlzLnJvdXRlS2V5ID0gcHJvcHMucm91dGVLZXk7XG5cbiAgICBjb25zdCBjb25maWcgPSBwcm9wcy5pbnRlZ3JhdGlvbi5fYmluZFRvUm91dGUoe1xuICAgICAgcm91dGU6IHRoaXMsXG4gICAgICBzY29wZTogdGhpcyxcbiAgICB9KTtcblxuICAgIGNvbnN0IGF1dGhvcml6ZXIgPSBwcm9wcy5hdXRob3JpemVyID8/IG5ldyBXZWJTb2NrZXROb25lQXV0aG9yaXplcigpOyAvLyBtdXN0IGJlIGV4cGxpY2l0bHkgTk9ORSAobm90IHVuZGVmaW5lZCkgZm9yIHN0YWNrIHVwZGF0ZXMgdG8gd29yayBjb3JyZWN0bHlcbiAgICBjb25zdCBhdXRoQmluZFJlc3VsdCA9IGF1dGhvcml6ZXIuYmluZCh7XG4gICAgICByb3V0ZTogdGhpcyxcbiAgICAgIHNjb3BlOiB0aGlzLndlYlNvY2tldEFwaSBpbnN0YW5jZW9mIENvbnN0cnVjdCA/IHRoaXMud2ViU29ja2V0QXBpIDogdGhpcywgLy8gc2NvcGUgdW5kZXIgdGhlIEFQSSBpZiBpdCdzIG5vdCBpbXBvcnRlZFxuICAgIH0pO1xuXG4gICAgY29uc3Qgcm91dGUgPSBuZXcgQ2ZuUm91dGUodGhpcywgJ1Jlc291cmNlJywge1xuICAgICAgYXBpSWQ6IHByb3BzLndlYlNvY2tldEFwaS5hcGlJZCxcbiAgICAgIGFwaUtleVJlcXVpcmVkOiBwcm9wcy5hcGlLZXlSZXF1aXJlZCxcbiAgICAgIHJvdXRlS2V5OiBwcm9wcy5yb3V0ZUtleSxcbiAgICAgIHRhcmdldDogYGludGVncmF0aW9ucy8ke2NvbmZpZy5pbnRlZ3JhdGlvbklkfWAsXG4gICAgICBhdXRob3JpemVySWQ6IGF1dGhCaW5kUmVzdWx0LmF1dGhvcml6ZXJJZCxcbiAgICAgIGF1dGhvcml6YXRpb25UeXBlOiBhdXRoQmluZFJlc3VsdC5hdXRob3JpemF0aW9uVHlwZSxcbiAgICAgIHJvdXRlUmVzcG9uc2VTZWxlY3Rpb25FeHByZXNzaW9uOiBwcm9wcy5yZXR1cm5SZXNwb25zZSA/ICckZGVmYXVsdCcgOiB1bmRlZmluZWQsXG4gICAgfSk7XG4gICAgdGhpcy5yb3V0ZUlkID0gcm91dGUucmVmO1xuICAgIGlmIChwcm9wcy5yZXR1cm5SZXNwb25zZSkge1xuICAgICAgbmV3IENmblJvdXRlUmVzcG9uc2UodGhpcywgJ1Jlc3BvbnNlJywge1xuICAgICAgICBhcGlJZDogcHJvcHMud2ViU29ja2V0QXBpLmFwaUlkLFxuICAgICAgICByb3V0ZUlkOiByb3V0ZS5yZWYsXG4gICAgICAgIHJvdXRlUmVzcG9uc2VLZXk6ICckZGVmYXVsdCcsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==