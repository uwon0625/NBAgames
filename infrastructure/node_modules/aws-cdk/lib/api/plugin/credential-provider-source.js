"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Mode = void 0;
var Mode;
(function (Mode) {
    Mode[Mode["ForReading"] = 0] = "ForReading";
    Mode[Mode["ForWriting"] = 1] = "ForWriting";
})(Mode || (exports.Mode = Mode = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlZGVudGlhbC1wcm92aWRlci1zb3VyY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjcmVkZW50aWFsLXByb3ZpZGVyLXNvdXJjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxJQUFZLElBR1g7QUFIRCxXQUFZLElBQUk7SUFDZCwyQ0FBVSxDQUFBO0lBQ1YsMkNBQVUsQ0FBQTtBQUNaLENBQUMsRUFIVyxJQUFJLG9CQUFKLElBQUksUUFHZiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBlbnVtIE1vZGUge1xuICBGb3JSZWFkaW5nLFxuICBGb3JXcml0aW5nLFxufVxuXG4vKipcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDcmVkZW50aWFsUHJvdmlkZXJTb3VyY2Uge1xuICBuYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIGNyZWRlbnRpYWwgcHJvdmlkZXIgaXMgZXZlbiBvbmxpbmVcbiAgICpcbiAgICogR3VhcmFudGVlZCB0byBiZSBjYWxsZWQgYmVmb3JlIGFueSBvZiB0aGUgb3RoZXIgZnVuY3Rpb25zIGFyZSBjYWxsZWQuXG4gICAqL1xuICBpc0F2YWlsYWJsZSgpOiBQcm9taXNlPGJvb2xlYW4+O1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBjcmVkZW50aWFsIHByb3ZpZGVyIGNhbiBwcm92aWRlIGNyZWRlbnRpYWxzIGZvciB0aGUgZ2l2ZW4gYWNjb3VudC5cbiAgICovXG4gIGNhblByb3ZpZGVDcmVkZW50aWFscyhhY2NvdW50SWQ6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj47XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIGNyZWRlbnRpYWwgcHJvdmlkZXIgZm9yIHRoZSBnaXZlbiBhY2NvdW50IGFuZCB0aGUgZ2l2ZW4gYWNjZXNzIG1vZGVcbiAgICpcbiAgICogR3VhcmFudGVlZCB0byBiZSBjYWxsZWQgb25seSBpZiBjYW5Qcm92aWRlQ3JlZGVudGFpbHMoKSByZXR1cm5lZCB0cnVlIGF0IHNvbWUgcG9pbnQuXG4gICAqXG4gICAqIFdoaWxlIGl0IGlzIHBvc3NpYmxlIGZvciB0aGUgcGx1Z2luIHRvIHJldHVybiBhIHN0YXRpYyBzZXQgb2YgY3JlZGVudGlhbHMsIGl0IGlzXG4gICAqIHJlY29tbWVuZGVkIHRvIHJldHVybiBhIHByb3ZpZGVyLlxuICAgKi9cbiAgZ2V0UHJvdmlkZXIoYWNjb3VudElkOiBzdHJpbmcsIG1vZGU6IE1vZGUsIG9wdGlvbnM/OiBQbHVnaW5Qcm92aWRlck9wdGlvbnMpOiBQcm9taXNlPFBsdWdpblByb3ZpZGVyUmVzdWx0Pjtcbn1cblxuLyoqXG4gKiBPcHRpb25zIGZvciB0aGUgYGdldFByb3ZpZGVyKClgIGZ1bmN0aW9uIG9mIGEgQ3JlZGVudGlhbFByb3ZpZGVyU291cmNlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGx1Z2luUHJvdmlkZXJPcHRpb25zIHtcbiAgLyoqXG4gICAqIFdoZXRoZXIgb3Igbm90IHRoaXMgaW1wbGVtZW50YXRpb24gb2YgdGhlIENMSSB3aWxsIHJlY29nbml6ZSB0aGUgYFNES3YzQ29tcGF0aWJsZUNyZWRlbnRpYWxQcm92aWRlcmAgcmV0dXJuIHZhcmlhbnRcbiAgICpcbiAgICogVW5sZXNzIG90aGVyd2lzZSBpbmRpY2F0ZWQsIHRoZSBDTEkgdmVyc2lvbiB3aWxsIG9ubHkgc3VwcG9ydCBTREt2M1xuICAgKiBjcmVkZW50aWFscywgbm90IFNES3YzIHByb3ZpZGVycy4gWW91IHNob3VsZCBhdm9pZCByZXR1cm5pbmcgdHlwZXMgdGhhdCB0aGVcbiAgICogY29uc3VtaW5nIENMSSB3aWxsIG5vdCB1bmRlcnN0YW5kLCBiZWNhdXNlIGl0IHdpbGwgbW9zdCBsaWtlbHkgY3Jhc2guXG4gICAqXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICByZWFkb25seSBzdXBwb3J0c1YzUHJvdmlkZXJzPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IHR5cGUgUGx1Z2luUHJvdmlkZXJSZXN1bHQgPSBTREt2MkNvbXBhdGlibGVDcmVkZW50aWFscyB8IFNES3YzQ29tcGF0aWJsZUNyZWRlbnRpYWxQcm92aWRlciB8IFNES3YzQ29tcGF0aWJsZUNyZWRlbnRpYWxzO1xuXG4vKipcbiAqIFNES3YyLWNvbXBhdGlibGUgY3JlZGVudGlhbCBwcm92aWRlci5cbiAqXG4gKiBCYXNlZCBvbiB0aGUgYENyZWRlbnRpYWxzYCBjbGFzcyBpbiBTREt2Mi4gVGhpcyBvYmplY3QgaXMgYSBzZXQgb2YgY3JlZGVudGlhbHNcbiAqIGFuZCBhIGNyZWRlbnRpYWwgcHJvdmlkZXIgaW4gb25lIChpdCBpcyBhIHNldCBvZiBjcmVkZW50aWFscyB0aGF0IHJlbWVtYmVyXG4gKiB3aGVyZSB0aGV5IGNhbWUgZnJvbSBhbmQgY2FuIHJlZnJlc2ggdGhlbXNlbHZlcykuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU0RLdjJDb21wYXRpYmxlQ3JlZGVudGlhbHMge1xuICAvKipcbiAgICogQVdTIGFjY2VzcyBrZXkgSUQuXG4gICAqL1xuICBhY2Nlc3NLZXlJZDogc3RyaW5nO1xuICAvKipcbiAgICAqIFdoZXRoZXIgdGhlIGNyZWRlbnRpYWxzIGhhdmUgYmVlbiBleHBpcmVkIGFuZCByZXF1aXJlIGEgcmVmcmVzaC5cbiAgICAqIFVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBleHBpcmVUaW1lLlxuICAgICovXG4gIGV4cGlyZWQ6IGJvb2xlYW47XG4gIC8qKlxuICAgICogVGltZSB3aGVuIGNyZWRlbnRpYWxzIHNob3VsZCBiZSBjb25zaWRlcmVkIGV4cGlyZWQuXG4gICAgKiBVc2VkIGluIGNvbmp1bmN0aW9uIHdpdGggZXhwaXJlZC5cbiAgICAqL1xuICBleHBpcmVUaW1lOiBEYXRlO1xuICAvKipcbiAgICAqIEFXUyBzZWNyZXQgYWNjZXNzIGtleS5cbiAgICAqL1xuICBzZWNyZXRBY2Nlc3NLZXk6IHN0cmluZztcbiAgLyoqXG4gICAgKiBBV1Mgc2Vzc2lvbiB0b2tlbi5cbiAgICAqL1xuICBzZXNzaW9uVG9rZW46IHN0cmluZztcblxuICAvKipcbiAgICogR2V0cyB0aGUgZXhpc3RpbmcgY3JlZGVudGlhbHMsIHJlZnJlc2hpbmcgdGhlbSBpZiBuZWNlc3NhcnksIGFuZCByZXR1cm5zXG4gICAqIGEgcHJvbWlzZSB0aGF0IHdpbGwgYmUgZnVsZmlsbGVkIGltbWVkaWF0ZWx5IChpZiBubyByZWZyZXNoIGlzIG5lY2Vzc2FyeSlcbiAgICogb3Igd2hlbiB0aGUgcmVmcmVzaCBoYXMgY29tcGxldGVkLlxuICAgKi9cbiAgZ2V0UHJvbWlzZSgpOiBQcm9taXNlPHZvaWQ+O1xufVxuXG4vKipcbiAqIFByb3ZpZGVyIGZvciBjcmVkZW50aWFsc1xuICpcbiAqIEJhc2VkIG9uIHRoZSBgQXdzQ3JlZGVudGlhbElkZW50aXR5UHJvdmlkZXJgIHR5cGUgZnJvbSBTREt2My4gVGhpcyB0eXBlXG4gKiBpcyBvbmx5IGEgY3JlZGVudGlhbCBmYWN0b3J5LiBJdCBtYXkgb3IgbWF5IG5vdCBiZSBjYWNoZWQ7IHRoYXQgaXMsXG4gKiBjYWxsaW5nIHRoZSBwcm92aWRlciB0d2ljZSBtYXkgZG8gMiBBUEkgcmVxdWVzdHMsIG9yIGl0IG1heSBkbyBvbmVcbiAqIGlmIHRoZSByZXN1bHQgZnJvbSB0aGUgZmlyc3QgY2FsbCBjYW4gYmUgcmV1c2VkLlxuICovXG5leHBvcnQgdHlwZSBTREt2M0NvbXBhdGlibGVDcmVkZW50aWFsUHJvdmlkZXIgPSAoaWRlbnRpdHlQcm9wZXJ0aWVzPzogUmVjb3JkPHN0cmluZywgYW55PikgPT4gUHJvbWlzZTxTREt2M0NvbXBhdGlibGVDcmVkZW50aWFscz47XG5cbi8qKlxuICogQmFzZWQgb24gdGhlIGBBd3NDcmVkZW50aWFsSWRlbnRpdHlgIHR5cGUgZnJvbSBTREt2My5cbiAqXG4gKiBUaGlzIGlzIGEgc3RhdGljIHNldCBvZiBjcmVkZW50aWFscy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTREt2M0NvbXBhdGlibGVDcmVkZW50aWFscyB7XG4gIC8qKlxuICAgKiBBV1MgYWNjZXNzIGtleSBJRFxuICAgKi9cbiAgcmVhZG9ubHkgYWNjZXNzS2V5SWQ6IHN0cmluZztcbiAgLyoqXG4gICAqIEFXUyBzZWNyZXQgYWNjZXNzIGtleVxuICAgKi9cbiAgcmVhZG9ubHkgc2VjcmV0QWNjZXNzS2V5OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBBIHNlY3VyaXR5IG9yIHNlc3Npb24gdG9rZW4gdG8gdXNlIHdpdGggdGhlc2UgY3JlZGVudGlhbHMuIFVzdWFsbHlcbiAgICogcHJlc2VudCBmb3IgdGVtcG9yYXJ5IGNyZWRlbnRpYWxzLlxuICAgKi9cbiAgcmVhZG9ubHkgc2Vzc2lvblRva2VuPzogc3RyaW5nO1xuICAvKipcbiAgICogQSBgRGF0ZWAgd2hlbiB0aGUgaWRlbnRpdHkgb3IgY3JlZGVudGlhbCB3aWxsIG5vIGxvbmdlciBiZSBhY2NlcHRlZC5cbiAgICovXG4gIHJlYWRvbmx5IGV4cGlyYXRpb24/OiBEYXRlO1xufVxuIl19