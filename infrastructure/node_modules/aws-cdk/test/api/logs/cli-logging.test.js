"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const logging_1 = require("../../../lib/logging");
describe('logging', () => {
    // Mock streams to capture output
    let mockStdout;
    let mockStderr;
    // Helper function to strip ANSI codes
    const stripAnsi = (str) => {
        const ansiRegex = /\u001b\[[0-9;]*[a-zA-Z]/g;
        return str.replace(ansiRegex, '');
    };
    beforeEach(() => {
        // Reset log level before each test
        (0, logging_1.setLogLevel)(logging_1.LogLevel.INFO);
        (0, logging_1.setCI)(false);
        // Create mock functions to capture output
        mockStdout = jest.fn();
        mockStderr = jest.fn();
        // Mock the write methods directly and strip ANSI codes
        jest.spyOn(process.stdout, 'write').mockImplementation((chunk) => {
            mockStdout(stripAnsi(chunk.toString()));
            return true;
        });
        jest.spyOn(process.stderr, 'write').mockImplementation((chunk) => {
            mockStderr(stripAnsi(chunk.toString()));
            return true;
        });
    });
    afterEach(() => {
        jest.restoreAllMocks();
    });
    describe('stream selection', () => {
        test('data() always writes to stdout', () => {
            (0, logging_1.data)('test message');
            expect(mockStdout).toHaveBeenCalledWith('test message\n');
            expect(mockStderr).not.toHaveBeenCalled();
        });
        test('error() always writes to stderr', () => {
            (0, logging_1.error)('test error');
            expect(mockStderr).toHaveBeenCalledWith('test error\n');
            expect(mockStdout).not.toHaveBeenCalled();
        });
        test('print() writes to stderr by default', () => {
            (0, logging_1.print)('test print');
            expect(mockStderr).toHaveBeenCalledWith('test print\n');
            expect(mockStdout).not.toHaveBeenCalled();
        });
        test('print() writes to stdout in CI mode', () => {
            (0, logging_1.setCI)(true);
            (0, logging_1.print)('test print');
            expect(mockStdout).toHaveBeenCalledWith('test print\n');
            expect(mockStderr).not.toHaveBeenCalled();
        });
    });
    describe('log levels', () => {
        test('respects log level settings', () => {
            (0, logging_1.setLogLevel)(logging_1.LogLevel.ERROR);
            (0, logging_1.error)('error message');
            (0, logging_1.warning)('warning message');
            (0, logging_1.print)('print message');
            expect(mockStderr).toHaveBeenCalledWith('error message\n');
            expect(mockStderr).not.toHaveBeenCalledWith('warning message\n');
            expect(mockStderr).not.toHaveBeenCalledWith('print message\n');
        });
        test('debug messages only show at debug level', () => {
            (0, logging_1.setLogLevel)(logging_1.LogLevel.INFO);
            (0, logging_1.debug)('debug message');
            expect(mockStderr).not.toHaveBeenCalled();
            (0, logging_1.setLogLevel)(logging_1.LogLevel.DEBUG);
            (0, logging_1.debug)('debug message');
            expect(mockStderr).toHaveBeenCalledWith('debug message\n');
        });
        test('trace messages only show at trace level', () => {
            (0, logging_1.setLogLevel)(logging_1.LogLevel.DEBUG);
            (0, logging_1.trace)('trace message');
            expect(mockStderr).not.toHaveBeenCalled();
            (0, logging_1.setLogLevel)(logging_1.LogLevel.TRACE);
            (0, logging_1.trace)('trace message');
            expect(mockStderr).toHaveBeenCalledWith('trace message\n');
        });
    });
    describe('message formatting', () => {
        test('formats messages with multiple arguments', () => {
            (0, logging_1.print)('Value: %d, String: %s', 42, 'test');
            expect(mockStderr).toHaveBeenCalledWith('Value: 42, String: test\n');
        });
        test('handles prefix correctly', () => {
            const prefixedLog = (0, logging_1.prefix)('PREFIX');
            prefixedLog('test message');
            expect(mockStderr).toHaveBeenCalledWith('PREFIX test message\n');
        });
        test('handles custom styles', () => {
            (0, logging_1.success)('success message');
            expect(mockStderr).toHaveBeenCalledWith('success message\n');
        });
    });
    describe('corked logging', () => {
        test('buffers messages when corked', async () => {
            await (0, logging_1.withCorkedLogging)(async () => {
                (0, logging_1.print)('message 1');
                (0, logging_1.print)('message 2');
                expect(mockStderr).not.toHaveBeenCalled();
            });
            expect(mockStderr).toHaveBeenCalledWith('message 1\n');
            expect(mockStderr).toHaveBeenCalledWith('message 2\n');
        });
        test('handles nested corking correctly', async () => {
            await (0, logging_1.withCorkedLogging)(async () => {
                (0, logging_1.print)('outer 1');
                await (0, logging_1.withCorkedLogging)(async () => {
                    (0, logging_1.print)('inner');
                });
                (0, logging_1.print)('outer 2');
                expect(mockStderr).not.toHaveBeenCalled();
            });
            expect(mockStderr).toHaveBeenCalledTimes(3);
            expect(mockStderr).toHaveBeenCalledWith('outer 1\n');
            expect(mockStderr).toHaveBeenCalledWith('inner\n');
            expect(mockStderr).toHaveBeenCalledWith('outer 2\n');
        });
    });
    describe('timestamp and prefix handling', () => {
        test('combines timestamp and prefix correctly', () => {
            (0, logging_1.log)({
                level: logging_1.LogLevel.INFO,
                message: 'test message',
                timestamp: true,
                prefix: 'PREFIX',
            });
            expect(mockStderr).toHaveBeenCalledWith(expect.stringMatching(/^PREFIX \[\d{2}:\d{2}:\d{2}\] test message\n$/));
        });
    });
});
//# sourceMappingURL=data:application/json;base64,